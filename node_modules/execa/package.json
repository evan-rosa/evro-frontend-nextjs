{
  "_args": [
    [
      {
        "raw": "execa@^2.0.4",
        "scope": null,
        "escapedName": "execa",
        "name": "execa",
        "rawSpec": "^2.0.4",
        "spec": ">=2.0.4 <3.0.0",
        "type": "range"
      },
      "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend/node_modules/serverless-next.js"
    ]
  ],
  "_from": "execa@^2.0.4",
  "_hasShrinkwrap": false,
  "_id": "execa@2.1.0",
  "_location": "/execa",
  "_nodeVersion": "12.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/execa_2.1.0_1570612241889_0.2434126485284398"
  },
  "_npmUser": {
    "name": "ehmicky",
    "email": "ehmicky@gmail.com"
  },
  "_npmVersion": "6.12.0",
  "_phantomChildren": {
    "isexe": "2.0.0",
    "pump": "3.0.0"
  },
  "_requested": {
    "raw": "execa@^2.0.4",
    "scope": null,
    "escapedName": "execa",
    "name": "execa",
    "rawSpec": "^2.0.4",
    "spec": ">=2.0.4 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/serverless-next.js"
  ],
  "_resolved": "https://registry.npmjs.org/execa/-/execa-2.1.0.tgz",
  "_shasum": "e5d3ecd837d2a60ec50f3da78fd39767747bbe99",
  "_shrinkwrap": null,
  "_spec": "execa@^2.0.4",
  "_where": "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend/node_modules/serverless-next.js",
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/execa/issues"
  },
  "dependencies": {
    "cross-spawn": "^7.0.0",
    "get-stream": "^5.0.0",
    "is-stream": "^2.0.0",
    "merge-stream": "^2.0.0",
    "npm-run-path": "^3.0.0",
    "onetime": "^5.1.0",
    "p-finally": "^2.0.0",
    "signal-exit": "^3.0.2",
    "strip-final-newline": "^2.0.0"
  },
  "description": "Process execution for humans",
  "devDependencies": {
    "@types/node": "^12.0.7",
    "ava": "^2.1.0",
    "coveralls": "^3.0.4",
    "is-running": "^2.1.0",
    "nyc": "^14.1.1",
    "p-event": "^4.1.0",
    "tempfile": "^3.0.0",
    "tsd": "^0.7.3",
    "xo": "^0.24.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-Y/URAVapfbYy2Xp/gb6A0E7iR8xeqOCXsuuaoMn7A5PzrXUK84E1gyiEfq0wQd/GHA6GsoHWwhNq8anb0mleIw==",
    "shasum": "e5d3ecd837d2a60ec50f3da78fd39767747bbe99",
    "tarball": "https://registry.npmjs.org/execa/-/execa-2.1.0.tgz",
    "fileCount": 11,
    "unpackedSize": 49164,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdnaQSCRA9TVsSAnZWagAASL0P/02jQZx5VhDm7oPvuJyG\nOFhgQC0whEsBhWIcAUTEBvzsXEka649Xi86B6SdnbHmIQjMoCGJ9ArpBSVG2\n46PaLLtmUCO+gZLYmS/Lb3AA1VEa8XbdYdtCdPuOAAu27lAtxcmd2H9dK2Ro\ntPSFcq/6hrWGkzips9riXKpHD4YBbUCkgVz8NHx7CQMHv9YWxI9rfQllAhIe\ngxdsbTJ7sV39ZaWvz8B3wcNRgHsZt97xgAbcg4kij1pu+1ywLJl/VX86RIj9\nT0S3b+/uZZBjJDQhWrmrGNZdvKjtAScv15QYTKXDoHuMMu45HLB3GRHgLn86\ngsDEXDLa/1jWZXgoOQrppugdBI44IUTswwdcDfdC9i11v3BTbjzoeL/HQ7aN\nj+/CwRxJ9okDidN9OsJiMlOpO9X/YL7xLq6BfVUekcXmmrWOUZgFu1UIZ9LS\nnCSF7gpysKci2ZTSDWO/rdkWG19EUqKsL6iwuoT/s6AeLNSyi46aq7icyeDK\n84/X3gTU6c2tI9WCkXtJEC538Aa0qR1H89rQaTuA2mTP8Ho9fmWvWn2HPVJc\np23BYEobG1T1XO7LHRjecJQ7jZ4l1H/8aLRNmmFe+IBKdMFEADOcD3+pk32y\nhj64Q/OK8T0MuVnXZWazUwDuko48Xl5VCikNEBqthJ7GF4E9sPhW8ZnHpx4a\nP3jJ\r\n=nKfP\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": "^8.12.0 || >=9.7.0"
  },
  "files": [
    "index.js",
    "index.d.ts",
    "lib"
  ],
  "gitHead": "e98561a71df16695f56700d7be406ec8fe41f0a3",
  "homepage": "https://github.com/sindresorhus/execa#readme",
  "keywords": [
    "exec",
    "child",
    "process",
    "execute",
    "fork",
    "execfile",
    "spawn",
    "file",
    "shell",
    "bin",
    "binary",
    "binaries",
    "npm",
    "path",
    "local"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "ehmicky",
      "email": "ehmicky@gmail.com"
    },
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    }
  ],
  "name": "execa",
  "nyc": {
    "exclude": [
      "**/fixtures/**",
      "**/test.js",
      "**/test/**"
    ]
  },
  "optionalDependencies": {},
  "readme": "<img src=\"media/logo.svg\" width=\"400\">\n<br>\n\n[![Build Status](https://travis-ci.org/sindresorhus/execa.svg?branch=master)](https://travis-ci.org/sindresorhus/execa) [![Coverage Status](https://coveralls.io/repos/github/sindresorhus/execa/badge.svg?branch=master)](https://coveralls.io/github/sindresorhus/execa?branch=master)\n\n> Process execution for humans\n\n\n## Why\n\nThis package improves [`child_process`](https://nodejs.org/api/child_process.html) methods with:\n\n- Promise interface.\n- [Strips the final newline](#stripfinalnewline) from the output so you don't have to do `stdout.trim()`.\n- Supports [shebang](https://en.wikipedia.org/wiki/Shebang_(Unix)) binaries cross-platform.\n- [Improved Windows support.](https://github.com/IndigoUnited/node-cross-spawn#why)\n- Higher max buffer. 100 MB instead of 200 KB.\n- [Executes locally installed binaries by name.](#preferlocal)\n- [Cleans up spawned processes when the parent process dies.](#cleanup)\n- [Get interleaved output](#all) from `stdout` and `stderr` similar to what is printed on the terminal. [*(Async only)*](#execasyncfile-arguments-options)\n- [Can specify file and arguments as a single string without a shell](#execacommandcommand-options)\n- More descriptive errors.\n\n\n## Install\n\n```\n$ npm install execa\n```\n\n\n## Usage\n\n```js\nconst execa = require('execa');\n\n(async () => {\n\tconst {stdout} = await execa('echo', ['unicorns']);\n\tconsole.log(stdout);\n\t//=> 'unicorns'\n})();\n```\n\nAdditional examples:\n\n```js\nconst execa = require('execa');\n\n(async () => {\n\t// Pipe the child process stdout to the current stdout\n\texeca('echo', ['unicorns']).stdout.pipe(process.stdout);\n\n\n\t// Catching an error\n\ttry {\n\t\tawait execa('wrong', ['command']);\n\t} catch (error) {\n\t\tconsole.log(error);\n\t\t/*\n\t\t{\n\t\t\tmessage: 'Command failed with exit code 2 (ENOENT): wrong command spawn wrong ENOENT',\n\t\t\terrno: -2,\n\t\t\tsyscall: 'spawn wrong',\n\t\t\tpath: 'wrong',\n\t\t\tspawnargs: ['command'],\n\t\t\tcommand: 'wrong command',\n\t\t\texitCode: 2,\n\t\t\texitCodeName: 'ENOENT',\n\t\t\tstdout: '',\n\t\t\tstderr: '',\n\t\t\tall: '',\n\t\t\tfailed: true,\n\t\t\ttimedOut: false,\n\t\t\tisCanceled: false,\n\t\t\tkilled: false\n\t\t}\n\t\t*/\n\t}\n\n\t// Cancelling a spawned process\n\tconst subprocess = execa('node');\n\tsetTimeout(() => {\n\t\tsubprocess.cancel();\n\t}, 1000);\n\ttry {\n\t\tawait subprocess;\n\t} catch (error) {\n\t\tconsole.log(subprocess.killed); // true\n\t\tconsole.log(error.isCanceled); // true\n\t}\n})();\n\n// Catching an error with a sync method\ntry {\n\texeca.sync('wrong', ['command']);\n} catch (error) {\n\tconsole.log(error);\n\t/*\n\t{\n\t\tmessage: 'Command failed with exit code 2 (ENOENT): wrong command spawnSync wrong ENOENT',\n\t\terrno: -2,\n\t\tsyscall: 'spawnSync wrong',\n\t\tpath: 'wrong',\n\t\tspawnargs: ['command'],\n\t\tcommand: 'wrong command',\n\t\texitCode: 2,\n\t\texitCodeName: 'ENOENT',\n\t\tstdout: '',\n\t\tstderr: '',\n\t\tfailed: true,\n\t\ttimedOut: false,\n\t\tisCanceled: false,\n\t\tkilled: false\n\t}\n\t*/\n}\n\n// Kill a process with SIGTERM, and after 2 seconds, kill it with SIGKILL\nconst subprocess = execa('node');\nsetTimeout(() => {\n\tsubprocess.kill('SIGTERM', {\n\t\tforceKillAfterTimeout: 2000\n\t});\n}, 1000);\n```\n\n## API\n\n### execa(file, arguments, [options])\n\nExecute a file. Think of this as a mix of [`child_process.execFile()`](https://nodejs.org/api/child_process.html#child_process_child_process_execfile_file_args_options_callback) and [`child_process.spawn()`](https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options).\n\nNo escaping/quoting is needed.\n\nUnless the [`shell`](#shell) option is used, no shell interpreter (Bash, `cmd.exe`, etc.) is used, so shell features such as variables substitution (`echo $PATH`) are not allowed.\n\nReturns a [`child_process` instance](https://nodejs.org/api/child_process.html#child_process_class_childprocess) which:\n  - is also a `Promise` resolving or rejecting with a [`childProcessResult`](#childProcessResult).\n  - exposes the following additional methods and properties.\n\n#### kill([signal], [options])\n\nSame as the original [`child_process#kill()`](https://nodejs.org/api/child_process.html#child_process_subprocess_kill_signal) except: if `signal` is `SIGTERM` (the default value) and the child process is not terminated after 5 seconds, force it by sending `SIGKILL`.\n\n##### options.forceKillAfterTimeout\n\nType: `number | false`<br>\nDefault: `5000`\n\nMilliseconds to wait for the child process to terminate before sending `SIGKILL`.\n\nCan be disabled with `false`.\n\n#### cancel()\n\nSimilar to [`childProcess.kill()`](https://nodejs.org/api/child_process.html#child_process_subprocess_kill_signal). This is preferred when cancelling the child process execution as the error is more descriptive and [`childProcessResult.isCanceled`](#iscanceled) is set to `true`.\n\n#### all\n\nType: `ReadableStream | undefined`\n\nStream combining/interleaving [`stdout`](https://nodejs.org/api/child_process.html#child_process_subprocess_stdout) and [`stderr`](https://nodejs.org/api/child_process.html#child_process_subprocess_stderr).\n\nThis is `undefined` when both [`stdout`](#stdout-1) and [`stderr`](#stderr-1) options are set to [`'pipe'`, `'ipc'`, `Stream` or `integer`](https://nodejs.org/dist/latest-v6.x/docs/api/child_process.html#child_process_options_stdio).\n\n### execa.sync(file, [arguments], [options])\n\nExecute a file synchronously.\n\nReturns or throws a [`childProcessResult`](#childProcessResult).\n\n### execa.command(command, [options])\n\nSame as [`execa()`](#execafile-arguments-options) except both file and arguments are specified in a single `command` string. For example, `execa('echo', ['unicorns'])` is the same as `execa.command('echo unicorns')`.\n\nIf the file or an argument contains spaces, they must be escaped with backslashes. This matters especially if `command` is not a constant but a variable, for example with `__dirname` or `process.cwd()`. Except for spaces, no escaping/quoting is needed.\n\nThe [`shell` option](#shell) must be used if the `command` uses shell-specific features, as opposed to being a simple `file` followed by its `arguments`.\n\n### execa.commandSync(command, [options])\n\nSame as [`execa.command()`](#execacommand-command-options) but synchronous.\n\nReturns or throws a [`childProcessResult`](#childProcessResult).\n\n### execa.node(scriptPath, [arguments], [options])\n\nExecute a Node.js script as a child process.\n\nSame as `execa('node', [scriptPath, ...arguments], options)` except (like [`child_process#fork()`](https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options)):\n  - the current Node version and options are used. This can be overridden using the [`nodePath`](#nodepath-for-node-only) and [`nodeOptions`](#nodeoptions-for-node-only) options.\n  - the [`shell`](#shell) option cannot be used\n  - an extra channel [`ipc`](https://nodejs.org/api/child_process.html#child_process_options_stdio) is passed to [`stdio`](#stdio)\n\n### childProcessResult\n\nType: `object`\n\nResult of a child process execution. On success this is a plain object. On failure this is also an `Error` instance.\n\nThe child process [fails](#failed) when:\n- its [exit code](#exitcode) is not `0`\n- it was [killed](#killed) with a [signal](#signal)\n- [timing out](#timedout)\n- [being canceled](#iscanceled)\n- there's not enough memory or there are already too many child processes\n\n#### command\n\nType: `string`\n\nThe file and arguments that were run.\n\n#### exitCode\n\nType: `number`\n\nThe numeric exit code of the process that was run.\n\n#### exitCodeName\n\nType: `string`\n\nThe textual exit code of the process that was run.\n\n#### stdout\n\nType: `string | Buffer`\n\nThe output of the process on stdout.\n\n#### stderr\n\nType: `string | Buffer`\n\nThe output of the process on stderr.\n\n#### all\n\nType: `string | Buffer`\n\nThe output of the process on both stdout and stderr. `undefined` if `execa.sync()` was used.\n\n#### failed\n\nType: `boolean`\n\nWhether the process failed to run.\n\n#### timedOut\n\nType: `boolean`\n\nWhether the process timed out.\n\n#### isCanceled\n\nType: `boolean`\n\nWhether the process was canceled.\n\n#### killed\n\nType: `boolean`\n\nWhether the process was killed.\n\n#### signal\n\nType: `string | undefined`\n\nThe signal that was used to terminate the process.\n\n#### originalMessage\n\nType: `string | undefined`\n\nOriginal error message. This is `undefined` unless the child process exited due to an `error` event or a timeout.\n\nThe `message` property contains both the `originalMessage` and some additional information added by Execa.\n\n### options\n\nType: `object`\n\n#### cleanup\n\nType: `boolean`<br>\nDefault: `true`\n\nKill the spawned process when the parent process exits unless either:\n\t- the spawned process is [`detached`](https://nodejs.org/api/child_process.html#child_process_options_detached)\n\t- the parent process is terminated abruptly, for example, with `SIGKILL` as opposed to `SIGTERM` or a normal exit\n\n#### preferLocal\n\nType: `boolean`<br>\nDefault: `false`\n\nPrefer locally installed binaries when looking for a binary to execute.<br>\nIf you `$ npm install foo`, you can then `execa('foo')`.\n\n#### localDir\n\nType: `string`<br>\nDefault: `process.cwd()`\n\nPreferred path to find locally installed binaries in (use with `preferLocal`).\n\n#### buffer\n\nType: `boolean`<br>\nDefault: `true`\n\nBuffer the output from the spawned process. When buffering is disabled you must consume the output of the `stdout` and `stderr` streams because the promise will not be resolved/rejected until they have completed.\n\nIf the spawned process fails, [`error.stdout`](#stdout), [`error.stderr`](#stderr), and [`error.all`](#all) will contain the buffered data.\n\n#### input\n\nType: `string | Buffer | stream.Readable`\n\nWrite some input to the `stdin` of your binary.<br>\nStreams are not allowed when using the synchronous methods.\n\n#### stdin\n\nType: `string | number | Stream | undefined`<br>\nDefault: `pipe`\n\nSame options as [`stdio`](https://nodejs.org/dist/latest-v6.x/docs/api/child_process.html#child_process_options_stdio).\n\n#### stdout\n\nType: `string | number | Stream | undefined`<br>\nDefault: `pipe`\n\nSame options as [`stdio`](https://nodejs.org/dist/latest-v6.x/docs/api/child_process.html#child_process_options_stdio).\n\n#### stderr\n\nType: `string | number | Stream | undefined`<br>\nDefault: `pipe`\n\nSame options as [`stdio`](https://nodejs.org/dist/latest-v6.x/docs/api/child_process.html#child_process_options_stdio).\n\n#### reject\n\nType: `boolean`<br>\nDefault: `true`\n\nSetting this to `false` resolves the promise with the error instead of rejecting it.\n\n#### stripFinalNewline\n\nType: `boolean`<br>\nDefault: `true`\n\nStrip the final [newline character](https://en.wikipedia.org/wiki/Newline) from the output.\n\n#### extendEnv\n\nType: `boolean`<br>\nDefault: `true`\n\nSet to `false` if you don't want to extend the environment variables when providing the `env` property.\n\n---\n\nExeca also accepts the below options which are the same as the options for [`child_process#spawn()`](https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options)/[`child_process#exec()`](https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback)\n\n#### cwd\n\nType: `string`<br>\nDefault: `process.cwd()`\n\nCurrent working directory of the child process.\n\n#### env\n\nType: `object`<br>\nDefault: `process.env`\n\nEnvironment key-value pairs. Extends automatically from `process.env`. Set [`extendEnv`](#extendenv) to `false` if you don't want this.\n\n#### argv0\n\nType: `string`\n\nExplicitly set the value of `argv[0]` sent to the child process. This will be set to `file` if not specified.\n\n#### stdio\n\nType: `string | string[]`<br>\nDefault: `pipe`\n\nChild's [stdio](https://nodejs.org/api/child_process.html#child_process_options_stdio) configuration.\n\n#### detached\n\nType: `boolean`\n\nPrepare child to run independently of its parent process. Specific behavior [depends on the platform](https://nodejs.org/api/child_process.html#child_process_options_detached).\n\n#### uid\n\nType: `number`\n\nSets the user identity of the process.\n\n#### gid\n\nType: `number`\n\nSets the group identity of the process.\n\n#### shell\n\nType: `boolean | string`<br>\nDefault: `false`\n\nIf `true`, runs `file` inside of a shell. Uses `/bin/sh` on UNIX and `cmd.exe` on Windows. A different shell can be specified as a string. The shell should understand the `-c` switch on UNIX or `/d /s /c` on Windows.\n\nWe recommend against using this option since it is:\n- not cross-platform, encouraging shell-specific syntax.\n- slower, because of the additional shell interpretation.\n- unsafe, potentially allowing command injection.\n\n#### encoding\n\nType: `string | null`<br>\nDefault: `utf8`\n\nSpecify the character encoding used to decode the `stdout` and `stderr` output. If set to `null`, then `stdout` and `stderr` will be a `Buffer` instead of a string.\n\n#### timeout\n\nType: `number`<br>\nDefault: `0`\n\nIf timeout is greater than `0`, the parent will send the signal identified by the `killSignal` property (the default is `SIGTERM`) if the child runs longer than timeout milliseconds.\n\n#### maxBuffer\n\nType: `number`<br>\nDefault: `100_000_000` (100 MB)\n\nLargest amount of data in bytes allowed on `stdout` or `stderr`.\n\n#### killSignal\n\nType: `string | number`<br>\nDefault: `SIGTERM`\n\nSignal value to be used when the spawned process will be killed.\n\n#### windowsVerbatimArguments\n\nType: `boolean`<br>\nDefault: `false`\n\nIf `true`, no quoting or escaping of arguments is done on Windows. Ignored on other platforms. This is set to `true` automatically when the `shell` option is `true`.\n\n#### nodePath *(for `.node()` only)*\n\nType: `string`<br>\nDefault: [`process.execPath`](https://nodejs.org/api/process.html#process_process_execpath)\n\nNode.js executable used to create the child process.\n\n#### nodeOptions *(for `.node()` only)*\n\nType: `string[]`<br>\nDefault: [`process.execArgv`](https://nodejs.org/api/process.html#process_process_execargv)\n\nList of [CLI options](https://nodejs.org/api/cli.html#cli_options) passed to the Node.js executable.\n\n## Tips\n\n### Save and pipe output from a child process\n\nLet's say you want to show the output of a child process in real-time while also saving it to a variable.\n\n```js\nconst execa = require('execa');\n\nconst subprocess = execa('echo', ['foo']);\nsubprocess.stdout.pipe(process.stdout);\n\n(async () => {\n\tconst {stdout} = await subprocess;\n\tconsole.log('child output:', stdout);\n})();\n```\n\n### Redirect output to a file\n\n```js\nconst execa = require('execa');\n\nconst subprocess = execa('echo', ['foo'])\nsubprocess.stdout.pipe(fs.createWriteStream('stdout.txt'))\n```\n\n### Redirect input from a file\n\n```js\nconst execa = require('execa');\n\nconst subprocess = execa('cat')\nfs.createReadStream('stdin.txt').pipe(subprocess.stdin)\n```\n\n### Execute the current package's binary\n\n```js\nconst {getBinPathSync} = require('get-bin-path');\n\nconst binPath = getBinPathSync();\nconst subprocess = execa(binPath);\n```\n\n`execa` can be combined with [`get-bin-path`](https://github.com/ehmicky/get-bin-path) to test the current package's binary. As opposed to hard-coding the path to the binary, this validates that the `package.json` `bin` field is correctly set up.\n\n## Related\n\n- [gulp-execa](https://github.com/ehmicky/gulp-execa) - Gulp plugin for `execa`\n\n\n## Maintainers\n\n- [Sindre Sorhus](https://github.com/sindresorhus)\n- [@ehmicky](https://github.com/ehmicky)\n\n\n---\n\n<div align=\"center\">\n\t<b>\n\t\t<a href=\"https://tidelift.com/subscription/pkg/npm-execa?utm_source=npm-execa&utm_medium=referral&utm_campaign=readme\">Get professional support for this package with a Tidelift subscription</a>\n\t</b>\n\t<br>\n\t<sub>\n\t\tTidelift helps make open source sustainable for maintainers while giving companies<br>assurances about security, maintenance, and licensing for their dependencies.\n\t</sub>\n</div>\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/execa.git"
  },
  "scripts": {
    "test": "xo && nyc ava && tsd"
  },
  "version": "2.1.0"
}
