{
  "_args": [
    [
      {
        "raw": "d3-fetch@1",
        "scope": null,
        "escapedName": "d3-fetch",
        "name": "d3-fetch",
        "rawSpec": "1",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend/node_modules/d3"
    ]
  ],
  "_from": "d3-fetch@>=1.0.0 <2.0.0",
  "_id": "d3-fetch@1.1.2",
  "_inCache": true,
  "_location": "/d3-fetch",
  "_nodeVersion": "10.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/d3-fetch_1.1.2_1535145925304_0.9534018010841996"
  },
  "_npmUser": {
    "name": "mbostock",
    "email": "mike@ocks.org"
  },
  "_npmVersion": "6.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "d3-fetch@1",
    "scope": null,
    "escapedName": "d3-fetch",
    "name": "d3-fetch",
    "rawSpec": "1",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/d3"
  ],
  "_resolved": "http://registry.npmjs.org/d3-fetch/-/d3-fetch-1.1.2.tgz",
  "_shasum": "957c8fbc6d4480599ba191b1b2518bf86b3e1be2",
  "_shrinkwrap": null,
  "_spec": "d3-fetch@1",
  "_where": "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend/node_modules/d3",
  "author": {
    "name": "Mike Bostock",
    "url": "http://bost.ocks.org/mike"
  },
  "bugs": {
    "url": "https://github.com/d3/d3-fetch/issues"
  },
  "dependencies": {
    "d3-dsv": "1"
  },
  "description": "Convenient parsing for Fetch.",
  "devDependencies": {
    "eslint": "5",
    "rollup": "0.64",
    "rollup-plugin-terser": "1",
    "tape": "4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-S2loaQCV/ZeyTyIF2oP8D1K9Z4QizUzW7cWeAOAS4U88qOt3Ucf6GsmgthuYSdyB2HyEm4CeGvkQxWsmInsIVA==",
    "shasum": "957c8fbc6d4480599ba191b1b2518bf86b3e1be2",
    "tarball": "https://registry.npmjs.org/d3-fetch/-/d3-fetch-1.1.2.tgz",
    "fileCount": 16,
    "unpackedSize": 50169,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbgHfFCRA9TVsSAnZWagAAgm8P/3y3btBFG10M3TLKKmfc\n6/W/cdShOTHj0NHcuae5C8Anu0CjUnMZufey3YO2kr+ItmjpbbygS8X7XER9\nIlmbBoHUjymTSy6QIVNv0tOPCbxjYwKGQzLiAodkOsvjOLHNnHtRPE+ggzlr\n5nR/Rz0pzPDh7XqLFmDv6evfEFNQ4Ua8kjlx4MgvA3TeNPFxCc7GWOuAwYGV\npuZInAxzxJMsMyerZ0F7LkODJGpMnLgKIsRnrg5mcE1rhzPdvMAYfuE95eO9\ndpdr4sB8jqe87ZJo38HsuJN17nNvThOzSTKlMqcRADxf0YVNDVXVaPJOiFQR\nK2pIWmkzNtmwyZV+UWpZ9c46pMB019nWJ7X671y5vBv0hjvWUykqW2h5RsAi\nFDTQbG7qvzXmryYADg03MnOus1FoZREnuOH5GSHlcF6PMTaVOulpr9skEzxp\nF76zBOj5ja7/mKtppA9Pk/4Uk7kn3axyR+3qD9YL9RpO26GMN2+ivu5bXK93\nijbdIDtftUXXybN1VNITGmfqDCDOW1dcPURTUbR9JRJCu40/u/gwHcZAI/Rj\n3LuFtnIlGJbrxv19o+6hlFbrK/b0dFmByR0emclm4qSHk9fiRRdxXj2UVtli\n2QYUFyHZ3YWXZcocyO7IrXljsVICSPCGX8LZj/ZzIc6bKjPD8uCNCdA71n8a\nwLCy\r\n=rL4n\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "00ca83fd310c7331bf262676e86e2429fb93a26b",
  "homepage": "https://d3js.org/d3-fetch/",
  "jsdelivr": "dist/d3-fetch.min.js",
  "keywords": [
    "d3",
    "d3-module",
    "fetch",
    "ajax",
    "XMLHttpRequest"
  ],
  "license": "BSD-3-Clause",
  "main": "dist/d3-fetch.js",
  "maintainers": [
    {
      "name": "mbostock",
      "email": "mike@ocks.org"
    }
  ],
  "module": "src/index.js",
  "name": "d3-fetch",
  "optionalDependencies": {},
  "readme": "# d3-fetch\n\nThis module provides convenient parsing on top of [Fetch](https://fetch.spec.whatwg.org/). For example, to load a text file:\n\n```js\nd3.text(\"/path/to/file.txt\").then(function(text) {\n  console.log(text); // Hello, world!\n});\n```\n\nTo load and parse a CSV file:\n\n```js\nd3.csv(\"/path/to/file.csv\").then(function(data) {\n  console.log(data); // [{\"Hello\": \"world\"}, …]\n});\n```\n\nThis module has built-in support for parsing [JSON](#json), [CSV](#csv), and [TSV](#tsv). You can parse additional formats by using [text](#text) directly. (This module replaced [d3-request](https://github.com/d3/d3-request).)\n\n## Installing\n\nIf you use NPM, `npm install d3-fetch`. Otherwise, download the [latest release](https://github.com/d3/d3-fetch/releases/latest). You can also load directly from [d3js.org](https://d3js.org) as a [standalone library](https://d3js.org/d3-fetch.v1.min.js). AMD, CommonJS, and vanilla environments are supported. In vanilla, a `d3` global is exported:\n\n```html\n<script src=\"https://d3js.org/d3-dsv.v1.min.js\"></script>\n<script src=\"https://d3js.org/d3-fetch.v1.min.js\"></script>\n<script>\n\nd3.csv(\"/path/to/file.csv\").then(function(data) {\n  console.log(data); // [{\"Hello\": \"world\"}, …]\n});\n\n</script>\n```\n\n## API Reference\n\n<a name=\"blob\" href=\"#blob\">#</a> d3.<b>blob</b>(<i>input</i>[, <i>init</i>]) [<>](https://github.com/d3/d3-fetch/blob/master/src/blob.js \"Source\")\n\nFetches the binary file at the specified *input* URL as a Blob. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields.\n\n<a name=\"buffer\" href=\"#buffer\">#</a> d3.<b>buffer</b>(<i>input</i>[, <i>init</i>]) [<>](https://github.com/d3/d3-fetch/blob/master/src/buffer.js \"Source\")\n\nFetches the binary file at the specified *input* URL as an ArrayBuffer. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields.\n\n<a name=\"csv\" href=\"#csv\">#</a> d3.<b>csv</b>(<i>input</i>[, <i>init</i>][, <i>row</i>]) [<>](https://github.com/d3/d3-fetch/blob/master/src/dsv.js \"Source\")\n\nEquivalent to [d3.dsv](#dsv) with the comma character as the delimiter.\n\n<a name=\"dsv\" href=\"#dsv\">#</a> d3.<b>dsv</b>(<i>delimiter</i>, <i>input</i>[, <i>init</i>][, <i>row</i>]) [<>](https://github.com/d3/d3-fetch/blob/master/src/dsv.js \"Source\")\n\nFetches the [DSV](https://github.com/d3/d3-dsv) file at the specified *input* URL. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields. An optional *row* conversion function may be specified to map and filter row objects to a more-specific representation; see [*dsv*.parse](https://github.com/d3/d3-dsv#dsv_parse) for details. For example:\n\n```js\nd3.dsv(\",\", \"test.csv\", function(d) {\n  return {\n    year: new Date(+d.Year, 0, 1), // convert \"Year\" column to Date\n    make: d.Make,\n    model: d.Model,\n    length: +d.Length // convert \"Length\" column to number\n  };\n}).then(function(data) {\n  console.log(data);\n});\n```\n\nIf only one of *init* and *row* is specified, it is interpreted as the *row* conversion function if it is a function, and otherwise an *init* object.\n\nSee also [d3.csv](#csv) and [d3.tsv](#tsv).\n\n<a name=\"html\" href=\"#html\">#</a> d3.<b>html</b>(<i>input</i>[, <i>init</i>]) [<>](https://github.com/d3/d3-fetch/blob/master/src/xml.js \"Source\")\n\nFetches the file at the specified *input* URL as [text](#text) and then [parses it](https://developer.mozilla.org/docs/Web/API/DOMParser) as HTML. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields.\n\n<a name=\"image\" href=\"#image\">#</a> d3.<b>image</b>(<i>input</i>[, <i>init</i>]) [<>](https://github.com/d3/d3-fetch/blob/master/src/image.js \"Source\")\n\nFetches the image at the specified *input* URL. If *init* is specified, sets any additional properties on the image before loading. For example, to enable an anonymous [cross-origin request](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image):\n\n```js\nd3.image(\"https://example.com/test.png\", {crossOrigin: \"anonymous\"}).then(function(img) {\n  console.log(img);\n});\n```\n\n<a name=\"json\" href=\"#json\">#</a> d3.<b>json</b>(<i>input</i>[, <i>init</i>]) [<>](https://github.com/d3/d3-fetch/blob/master/src/json.js \"Source\")\n\nFetches the [JSON](http://json.org) file at the specified *input* URL. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields.\n\n<a name=\"svg\" href=\"#svg\">#</a> d3.<b>svg</b>(<i>input</i>[, <i>init</i>]) [<>](https://github.com/d3/d3-fetch/blob/master/src/xml.js \"Source\")\n\nFetches the file at the specified *input* URL as [text](#text) and then [parses it](https://developer.mozilla.org/docs/Web/API/DOMParser) as SVG. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields.\n\n<a name=\"text\" href=\"#text\">#</a> d3.<b>text</b>(<i>input</i>[, <i>init</i>]) [<>](https://github.com/d3/d3-fetch/blob/master/src/text.js \"Source\")\n\nFetches the text file at the specified *input* URL. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields.\n\n<a name=\"tsv\" href=\"#tsv\">#</a> d3.<b>tsv</b>(<i>input</i>[, <i>init</i>][, <i>row</i>]) [<>](https://github.com/d3/d3-fetch/blob/master/src/dsv.js \"Source\")\n\nEquivalent to [d3.dsv](#dsv) with the tab character as the delimiter.\n\n<a name=\"xml\" href=\"#xml\">#</a> d3.<b>xml</b>(<i>input</i>[, <i>init</i>]) [<>](https://github.com/d3/d3-fetch/blob/master/src/xml.js \"Source\")\n\nFetches the file at the specified *input* URL as [text](#text) and then [parses it](https://developer.mozilla.org/docs/Web/API/DOMParser) as XML. If *init* is specified, it is passed along to the underlying call to [fetch](https://fetch.spec.whatwg.org/#fetch-method); see [RequestInit](https://fetch.spec.whatwg.org/#requestinit) for allowed fields.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/d3/d3-fetch.git"
  },
  "scripts": {
    "postpublish": "git push && git push --tags && cd ../d3.github.com && git pull && cp ../${npm_package_name}/dist/${npm_package_name}.js ${npm_package_name}.v${npm_package_version%%.*}.js && cp ../${npm_package_name}/dist/${npm_package_name}.min.js ${npm_package_name}.v${npm_package_version%%.*}.min.js && git add ${npm_package_name}.v${npm_package_version%%.*}.js ${npm_package_name}.v${npm_package_version%%.*}.min.js && git commit -m \"${npm_package_name} ${npm_package_version}\" && git push && cd - && zip -j dist/${npm_package_name}.zip -- LICENSE README.md dist/${npm_package_name}.js dist/${npm_package_name}.min.js",
    "prepublishOnly": "rm -rf dist && yarn test",
    "pretest": "rollup -c",
    "test": "tape 'test/**/*-test.js' && eslint src"
  },
  "unpkg": "dist/d3-fetch.min.js",
  "version": "1.1.2"
}
