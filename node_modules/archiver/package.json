{
  "_args": [
    [
      {
        "raw": "archiver@^3.0.0",
        "scope": null,
        "escapedName": "archiver",
        "name": "archiver",
        "rawSpec": "^3.0.0",
        "spec": ">=3.0.0 <4.0.0",
        "type": "range"
      },
      "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend/node_modules/@serverless/aws-lambda"
    ]
  ],
  "_from": "archiver@^3.0.0",
  "_hasShrinkwrap": false,
  "_id": "archiver@3.1.1",
  "_location": "/archiver",
  "_nodeVersion": "8.11.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/archiver_3.1.1_1564787348535_0.508525605334794"
  },
  "_npmUser": {
    "name": "ctalkington",
    "email": "chris@talkingtontech.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {
    "inherits": "2.0.3",
    "string_decoder": "1.1.1",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "raw": "archiver@^3.0.0",
    "scope": null,
    "escapedName": "archiver",
    "name": "archiver",
    "rawSpec": "^3.0.0",
    "spec": ">=3.0.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@serverless/aws-lambda",
    "/@serverless/aws-lambda-layer",
    "/@serverless/aws-lambda-layer/@serverless/aws-s3",
    "/@serverless/aws-lambda/@serverless/aws-s3",
    "/@serverless/aws-s3"
  ],
  "_resolved": "https://registry.npmjs.org/archiver/-/archiver-3.1.1.tgz",
  "_shasum": "9db7819d4daf60aec10fe86b16cb9258ced66ea0",
  "_shrinkwrap": null,
  "_spec": "archiver@^3.0.0",
  "_where": "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend/node_modules/@serverless/aws-lambda",
  "author": {
    "name": "Chris Talkington",
    "url": "http://christalkington.com/"
  },
  "bugs": {
    "url": "https://github.com/archiverjs/node-archiver/issues"
  },
  "dependencies": {
    "archiver-utils": "^2.1.0",
    "async": "^2.6.3",
    "buffer-crc32": "^0.2.1",
    "glob": "^7.1.4",
    "readable-stream": "^3.4.0",
    "tar-stream": "^2.1.0",
    "zip-stream": "^2.1.2"
  },
  "description": "a streaming interface for archive generation",
  "devDependencies": {
    "archiver-jsdoc-theme": "^1.1.1",
    "chai": "^4.2.0",
    "jsdoc": "^3.6.3",
    "mkdirp": "^0.5.0",
    "mocha": "^6.2.0",
    "rimraf": "^2.6.3",
    "stream-bench": "^0.1.2",
    "tar": "^4.4.10",
    "yauzl": "^2.9.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-5Hxxcig7gw5Jod/8Gq0OneVgLYET+oNHcxgWItq4TbhOzRLKNAFUb9edAftiMKXvXfCB0vbGrJdZDNq0dWMsxg==",
    "shasum": "9db7819d4daf60aec10fe86b16cb9258ced66ea0",
    "tarball": "https://registry.npmjs.org/archiver/-/archiver-3.1.1.tgz",
    "fileCount": 10,
    "unpackedSize": 49008,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdRMKVCRA9TVsSAnZWagAAmcwP+wUju/WfDgPsn7KbVXcO\niXN75CS/FwkV3zTxsre7/5P+6NoFE1T0kY2sc+Q7bNgJew8XzO/cXRU0+7AJ\nc0Cde6t7r5NfzEqjZOZd16n5yhc4TQnbafqx3itbZt9SQ3cvRBfxgZV4wmoZ\n9OvHTYX9IBvGksKz5DloAgfCmDuNv5b/pv9kELT9AAZQndcERJbba9g5fAc1\nbbFzXjpXAk6UQXkpUtQj+plEHJExHXx5Nnz9O2U9sqTmARVclRDioiQHhUVO\ngonSkKjo7C7sY7As5YNyJGKL2SByY7GBU5Dyn77m26RIYK6flIEheqsn7kpH\nznpst5qcjGXfWFR12KCVg5o+aPfQEpNBS//WZe8wD2ho87+DNBWmYAm7Oufw\nYj8GymHwGwZH8a0IkByWExHl4hHa3wlJ/+XE9iFqHSbCR5MWCsp6EPiEfIXe\nxf9Q2M90H/m/QKFwgxlkDuXdUq9gOAKOcP7xWvxdin/faXF4H3WQD6vioz1q\nYnQqV9hZk14l/zaD6KQbTEue2bG1OjqXxehqEj4nvEOeZtY9oYzNsVltFCnQ\n7PbPRkHo/ABVOpEiffTang2WhTg3ODMk3oSQK3L+KZuM/RSnThZ8Bwl0Fcz+\nXS7/VqrEb1ZndDNT532dN0TBFg2/NyhOWfQXWhPBawL6bdCxMBAdwq/0a66G\nsHwb\r\n=w37P\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 6"
  },
  "files": [
    "index.js",
    "lib"
  ],
  "gitHead": "60191864f4fbebfeffc2a06615d995da214658a7",
  "homepage": "https://github.com/archiverjs/node-archiver",
  "keywords": [
    "archive",
    "archiver",
    "stream",
    "zip",
    "tar"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "ctalkington",
      "email": "chris@christalkington.com"
    }
  ],
  "name": "archiver",
  "optionalDependencies": {},
  "publishConfig": {
    "registry": "https://registry.npmjs.org/"
  },
  "readme": "# Archiver\r\n\r\n[![Build Status](https://travis-ci.org/archiverjs/node-archiver.svg?branch=master)](https://travis-ci.org/archiverjs/node-archiver) [![Build status](https://ci.appveyor.com/api/projects/status/38kqu3yp159nodxe/branch/master?svg=true)](https://ci.appveyor.com/project/ctalkington/node-archiver/branch/master)\r\n\r\na streaming interface for archive generation\r\n\r\nVisit the [API documentation](https://www.archiverjs.com/) for a list of all methods available.\r\n\r\n## Install\r\n\r\n```bash\r\nnpm install archiver --save\r\n```\r\n\r\n## Quick Start\r\n\r\n```js\r\n// require modules\r\nvar fs = require('fs');\r\nvar archiver = require('archiver');\r\n\r\n// create a file to stream archive data to.\r\nvar output = fs.createWriteStream(__dirname + '/example.zip');\r\nvar archive = archiver('zip', {\r\n  zlib: { level: 9 } // Sets the compression level.\r\n});\r\n\r\n// listen for all archive data to be written\r\n// 'close' event is fired only when a file descriptor is involved\r\noutput.on('close', function() {\r\n  console.log(archive.pointer() + ' total bytes');\r\n  console.log('archiver has been finalized and the output file descriptor has closed.');\r\n});\r\n\r\n// This event is fired when the data source is drained no matter what was the data source.\r\n// It is not part of this library but rather from the NodeJS Stream API.\r\n// @see: https://nodejs.org/api/stream.html#stream_event_end\r\noutput.on('end', function() {\r\n  console.log('Data has been drained');\r\n});\r\n\r\n// good practice to catch warnings (ie stat failures and other non-blocking errors)\r\narchive.on('warning', function(err) {\r\n  if (err.code === 'ENOENT') {\r\n    // log warning\r\n  } else {\r\n    // throw error\r\n    throw err;\r\n  }\r\n});\r\n\r\n// good practice to catch this error explicitly\r\narchive.on('error', function(err) {\r\n  throw err;\r\n});\r\n\r\n// pipe archive data to the file\r\narchive.pipe(output);\r\n\r\n// append a file from stream\r\nvar file1 = __dirname + '/file1.txt';\r\narchive.append(fs.createReadStream(file1), { name: 'file1.txt' });\r\n\r\n// append a file from string\r\narchive.append('string cheese!', { name: 'file2.txt' });\r\n\r\n// append a file from buffer\r\nvar buffer3 = Buffer.from('buff it!');\r\narchive.append(buffer3, { name: 'file3.txt' });\r\n\r\n// append a file\r\narchive.file('file1.txt', { name: 'file4.txt' });\r\n\r\n// append files from a sub-directory and naming it `new-subdir` within the archive\r\narchive.directory('subdir/', 'new-subdir');\r\n\r\n// append files from a sub-directory, putting its contents at the root of archive\r\narchive.directory('subdir/', false);\r\n\r\n// append files from a glob pattern\r\narchive.glob('subdir/*.txt');\r\n\r\n// finalize the archive (ie we are done appending files but streams have to finish yet)\r\n// 'close', 'end' or 'finish' may be fired right after calling this method so register to them beforehand\r\narchive.finalize();\r\n```\r\n\r\n## Formats\r\n\r\nArchiver ships with out of the box support for TAR and ZIP archives.\r\n\r\nYou can register additional formats with `registerFormat`.\r\n\r\n_Formats will be changing in the next few releases to implement a middleware approach._\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/archiverjs/node-archiver.git"
  },
  "scripts": {
    "bench": "node benchmark/simple/pack-zip.js",
    "jsdoc": "jsdoc -c jsdoc.json README.md",
    "test": "mocha --reporter dot"
  },
  "version": "3.1.1"
}
