{
  "_args": [
    [
      {
        "raw": "@zeit/next-css@^1.0.1",
        "scope": "@zeit",
        "escapedName": "@zeit%2fnext-css",
        "name": "@zeit/next-css",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend"
    ]
  ],
  "_from": "@zeit/next-css@^1.0.1",
  "_hasShrinkwrap": false,
  "_id": "@zeit/next-css@1.0.1",
  "_location": "/@zeit/next-css",
  "_nodeVersion": "10.7.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/next-css_1.0.1_1537442285807_0.005219390562277049"
  },
  "_npmUser": {
    "name": "timneutkens",
    "email": "tim@timneutkens.nl"
  },
  "_npmVersion": "6.1.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@zeit/next-css@^1.0.1",
    "scope": "@zeit",
    "escapedName": "@zeit%2fnext-css",
    "name": "@zeit/next-css",
    "rawSpec": "^1.0.1",
    "spec": ">=1.0.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@zeit/next-css/-/next-css-1.0.1.tgz",
  "_shasum": "4f784e841e7ca1b21b3468a902e2c1fa95a3e75c",
  "_shrinkwrap": null,
  "_spec": "@zeit/next-css@^1.0.1",
  "_where": "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend",
  "bugs": {
    "url": "https://github.com/zeit/next-plugins/issues"
  },
  "dependencies": {
    "css-loader": "1.0.0",
    "extracted-loader": "1.0.4",
    "find-up": "2.1.0",
    "ignore-loader": "0.1.2",
    "mini-css-extract-plugin": "0.4.3",
    "postcss-loader": "3.0.0"
  },
  "description": "Import `.css` files in your Next.js project",
  "devDependencies": {
    "webpack": "^4.16.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-yfHPRy/ne/5SddVClsoy+fpU7e0Cs1gkWA67/wm2uIu+9rznF45yQLxHEt5dPGF3h6IiIh7ZtIgA8VV8YKq87A==",
    "shasum": "4f784e841e7ca1b21b3468a902e2c1fa95a3e75c",
    "tarball": "https://registry.npmjs.org/@zeit/next-css/-/next-css-1.0.1.tgz",
    "fileCount": 5,
    "unpackedSize": 8752,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbo4HuCRA9TVsSAnZWagAAoVUQAJffEQ/baCA3bJNko6YG\nG48LnRLXprPtD7fUOpSEni1mm/IqI8lRdt59QYdmwP44StMEZcpKzEwLtvBT\nNWzZ9Pq+qkHX3FQR+vUtmqP89HnIXTvwBk2G1ZgtUxRGV+bGoaRiWNQverzt\n0btEhnlg5SChaXkPHlFTisuWPbw4pdv2IdbYpn41w8F79y7Oj5jqo/LI6rm/\neUWynzVunRjptDI11vFVEONcC2a71/TrcXNHSXVNxPEDOoDvu1CLlwsuhrUw\nnrAKbLVPwQQp/mUMUKe3guyFZF9qti+CWJvTaCCaddA6093J/zlwo8xM7Prq\nsmQIqCRyYNrhUDEvR3MCQY82rDvVn5ApDri3sykxI9tJWOcyRtth0JSpgcyF\nijIpKos9NBdbmhG7Rt/fKPEimPKzymhhTLFL0z56i2FsiJXeLTCVpaMZdAC+\nU4NJ9JcAHZoEWuhgpkOL3xtaUNNIvea1Tmlsxmle44I3NuqFWsQVgFTNLzWy\ndrv3DzIIjKdxYHVmruklZHqlz4BtNZ7i15astQVycjLBu8cIw+gZfu/XW1gc\nAxypUNo5MriAcUH6Yx2qX8ndBA7Ych/1IdxDmJWFMoYnOTB0j6x9UkC2WtIO\nwAC/28U/e1UKaP9T7FP9bYYmneTr0Jjoy34bUzp06zqPNGoQxYoMUHacsvX4\nZpX4\r\n=hNiM\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "ea033aff7b1d4717e80edb64320e2d6fcc873430",
  "homepage": "https://github.com/zeit/next-plugins#readme",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "arunoda",
      "email": "arunoda.susiripala@gmail.com"
    },
    {
      "name": "codetheory",
      "email": "thecodetheory@gmail.com"
    },
    {
      "name": "hharnisc",
      "email": "hharnisc@gmail.com"
    },
    {
      "name": "iamevilrabbit",
      "email": "hello@evilrabb.it"
    },
    {
      "name": "igorklopov",
      "email": "igor@klopov.com"
    },
    {
      "name": "jamo",
      "email": "jamo@isotalo.fi"
    },
    {
      "name": "javivelasco",
      "email": "javier.velasco86@gmail.com"
    },
    {
      "name": "joecohens",
      "email": "joecohenr@gmail.com"
    },
    {
      "name": "leo",
      "email": "leo@zeit.co"
    },
    {
      "name": "matheuss",
      "email": "me@matheus.top"
    },
    {
      "name": "nkzawa",
      "email": "naoyuki.kanezawa@gmail.com"
    },
    {
      "name": "olliv",
      "email": "olli@zeit.co"
    },
    {
      "name": "rauchg",
      "email": "rauchg@gmail.com"
    },
    {
      "name": "timneutkens",
      "email": "tim@timneutkens.nl"
    },
    {
      "name": "tootallnate",
      "email": "nathan@tootallnate.net"
    }
  ],
  "name": "@zeit/next-css",
  "optionalDependencies": {},
  "readme": "# Next.js + CSS\n\nImport `.css` files in your Next.js project\n\n## Installation\n\n```\nnpm install --save @zeit/next-css\n```\n\nor\n\n```\nyarn add @zeit/next-css\n```\n\n## Usage\n\nThe stylesheet is compiled to `.next/static/css`. Next.js will automatically add the css file to the HTML. \nIn production a chunk hash is added so that styles are updated when a new version of the stylesheet is deployed.\n\n### Without CSS modules\n\nCreate a `next.config.js` in the root of your project (next to pages/ and package.json)\n\n```js\n// next.config.js\nconst withCSS = require('@zeit/next-css')\nmodule.exports = withCSS()\n```\n\nCreate a CSS file `style.css`\n\n```css\n.example {\n  font-size: 50px;\n}\n```\n\nCreate a page file `pages/index.js`\n\n```js\nimport \"../style.css\"\n\nexport default () => <div className=\"example\">Hello World!</div>\n```\n\n__Note: CSS files can _not_ be imported into your [`_document.js`](https://github.com/zeit/next.js#custom-document). You can use the [`_app.js`](https://github.com/zeit/next.js#custom-app) instead or any other page.__\n\n### With CSS modules\n\n```js\n// next.config.js\nconst withCSS = require('@zeit/next-css')\nmodule.exports = withCSS({\n  cssModules: true\n})\n```\n\nCreate a CSS file `style.css`\n\n```css\n.example {\n  font-size: 50px;\n}\n```\n\nCreate a page file `pages/index.js`\n\n```js\nimport css from \"../style.css\"\n\nexport default () => <div className={css.example}>Hello World!</div>\n```\n\n### With CSS modules and options\n\nYou can also pass a list of options to the `css-loader` by passing an object called `cssLoaderOptions`.\n\nFor instance, [to enable locally scoped CSS modules](https://github.com/css-modules/css-modules/blob/master/docs/local-scope.md#css-modules--local-scope), you can write:\n\n```js\n// next.config.js\nconst withCSS = require('@zeit/next-css')\nmodule.exports = withCSS({\n  cssModules: true,\n  cssLoaderOptions: {\n    importLoaders: 1,\n    localIdentName: \"[local]___[hash:base64:5]\",\n  }\n})\n```\n\nCreate a CSS file `styles.css`\n\n```css\n.example {\n  font-size: 50px;\n}\n```\n\nCreate a page file `pages/index.js` that imports your stylesheet and uses the hashed class name from the stylesheet\n\n```js\nimport css from \"../style.css\"\n\nconst Component = props => {\n  return (\n    <div className={css.backdrop}>\n      ...\n    </div>\n  )\n}\n\nexport default Component\n```\n\nYour exported HTML will then reflect locally scoped CSS class names.\n\nFor a list of supported options, [refer to the webpack `css-loader` README](https://github.com/webpack-contrib/css-loader#options).\n\n### PostCSS plugins\n\nCreate a `next.config.js` in your project\n\n```js\n// next.config.js\nconst withCSS = require('@zeit/next-css')\nmodule.exports = withCSS()\n```\n\nCreate a `postcss.config.js`\n\n```js\nmodule.exports = {\n  plugins: {\n    // Illustrational\n    'postcss-css-variables': {}\n  }\n}\n```\n\nCreate a CSS file `style.css` the CSS here is using the css-variables postcss plugin.\n\n```css\n:root {\n  --some-color: red;\n}\n\n.example {\n  /* red */\n  color: var(--some-color);\n}\n```\n\nWhen `postcss.config.js` is not found `postcss-loader` will not be added and will not cause overhead.\n\nYou can also pass a list of options to the `postcss-loader` by passing an object called `postcssLoaderOptions`.\n\nFor example, to pass theme env variables to postcss-loader, you can write:\n\n```js\n// next.config.js\nconst withCSS = require('@zeit/next-css')\nmodule.exports = withCSS({\n  postcssLoaderOptions: {\n    parser: true,\n    config: {\n      ctx: {\n        theme: JSON.stringify(process.env.REACT_APP_THEME)\n      }\n    }\n  }\n})\n```\n\n\n\n### Configuring Next.js\n\nOptionally you can add your custom Next.js configuration as parameter\n\n```js\n// next.config.js\nconst withCSS = require('@zeit/next-css')\nmodule.exports = withCSS({\n  webpack(config, options) {\n    return config\n  }\n})\n```\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zeit/next-plugins.git"
  },
  "version": "1.0.1"
}
