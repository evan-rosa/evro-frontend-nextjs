{
  "_args": [
    [
      {
        "raw": "d3-time-format@2",
        "scope": null,
        "escapedName": "d3-time-format",
        "name": "d3-time-format",
        "rawSpec": "2",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend/node_modules/d3-scale"
    ]
  ],
  "_from": "d3-time-format@2",
  "_hasShrinkwrap": false,
  "_id": "d3-time-format@2.2.3",
  "_location": "/d3-time-format",
  "_nodeVersion": "10.16.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/d3-time-format_2.2.3_1577638185395_0.7719280050639852"
  },
  "_npmUser": {
    "name": "mbostock",
    "email": "mike@ocks.org"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "d3-time-format@2",
    "scope": null,
    "escapedName": "d3-time-format",
    "name": "d3-time-format",
    "rawSpec": "2",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@nivo/axes",
    "/@nivo/core",
    "/d3",
    "/d3-scale",
    "/d3/d3-scale"
  ],
  "_resolved": "https://registry.npmjs.org/d3-time-format/-/d3-time-format-2.2.3.tgz",
  "_shasum": "0c9a12ee28342b2037e5ea1cf0b9eb4dd75f29cb",
  "_shrinkwrap": null,
  "_spec": "d3-time-format@2",
  "_where": "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend/node_modules/d3-scale",
  "author": {
    "name": "Mike Bostock",
    "url": "http://bost.ocks.org/mike"
  },
  "bugs": {
    "url": "https://github.com/d3/d3-time-format/issues"
  },
  "dependencies": {
    "d3-time": "1"
  },
  "description": "A JavaScript time formatter and parser inspired by strftime and strptime.",
  "devDependencies": {
    "d3-queue": "3",
    "eslint": "6",
    "rollup": "1",
    "rollup-plugin-terser": "5",
    "tape": "4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-RAHNnD8+XvC4Zc4d2A56Uw0yJoM7bsvOlJR33bclxq399Rak/b9bhvu/InjxdWhPtkgU53JJcleJTGkNRnN6IA==",
    "shasum": "0c9a12ee28342b2037e5ea1cf0b9eb4dd75f29cb",
    "tarball": "https://registry.npmjs.org/d3-time-format/-/d3-time-format-2.2.3.tgz",
    "fileCount": 41,
    "unpackedSize": 82012,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeCNkpCRA9TVsSAnZWagAAQ3MP/jBroXQPG097kx/3Y7e2\nBUcPDwOXGwUb6yLGKI2amPGumtMheqCHw18murp4Y/QVSZqVX7DuZ/iOQIZw\np0vOLydy03Ff/eocXkX1fCAHJoEBAJWNCNH+Qm4rKHVVUX+PD0bMDC3vzqI5\nnKoqPLpsikIMj4aR9qxVcwRKDAk58dSGuUYafaNt4GUU/zBTr9qC/fZibgqb\nyEjQm1KGPzAp5ngZoImE0Db03Gn8+fMgbISCcZNrzj90PwChEn11e2s4BCo4\nd55ESybf/bcvg4t5xUGPNNcirnL3cCtlMno5IXkmt1/Wrd3co1JBNUxBsMdT\ntEhDHByOqnz0gslV2fxCk2mwR3XDO9QCaYksv189mYhP7272EFas17Ul3Iv9\nA/iFRJfugKdx3pnM2vJ7oYvKYz1l/cJskwSDU5Y0dd1FhpUu+JYlU12mt1yV\njmf/7Ul/jFb69UK6L9G2qZMZd2QOiMJLuuwx7SHc7MkDUXhbJxEbZ2IPeWJj\n2YzsB7kk5ExjQ1UTSYtz/I6dhH4neo6Sy+xhX1/kWUbSuAf47q+4Bp2abs11\n6lKhiL7Y4Aels5x+lHv0zROimYKtFjOXO5Q8/QpHXG7XkG/Isc0gd2CzjTTB\nHtfolUkUAIbyZZ84z9zbILL4i20aPjZ/3elFSgszbk5uOVtWz1+Yrb5YpULb\n2FYJ\r\n=LIiI\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "dist/**/*.js",
    "src/**/*.js",
    "locale/*.json"
  ],
  "gitHead": "e3bb9e4a3d7ac6f82fa0bd79f9524776fc85b040",
  "homepage": "https://d3js.org/d3-time-format/",
  "jsdelivr": "dist/d3-time-format.min.js",
  "keywords": [
    "d3",
    "d3-module",
    "time",
    "format",
    "strftime",
    "strptime"
  ],
  "license": "BSD-3-Clause",
  "main": "dist/d3-time-format.js",
  "maintainers": [
    {
      "name": "mbostock",
      "email": "mike@ocks.org"
    }
  ],
  "module": "src/index.js",
  "name": "d3-time-format",
  "optionalDependencies": {},
  "readme": "# d3-time-format\n\nThis module provides a JavaScript implementation of the venerable [strptime](http://pubs.opengroup.org/onlinepubs/009695399/functions/strptime.html) and [strftime](http://pubs.opengroup.org/onlinepubs/007908799/xsh/strftime.html) functions from the C standard library, and can be used to parse or format [dates](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) in a variety of locale-specific representations. To format a date, create a [formatter](#locale_format) from a specifier (a string with the desired format *directives*, indicated by `%`); then pass a date to the formatter, which returns a string. For example, to convert the current date to a human-readable string:\n\n```js\nvar formatTime = d3.timeFormat(\"%B %d, %Y\");\nformatTime(new Date); // \"June 30, 2015\"\n```\n\nLikewise, to convert a string back to a date, create a [parser](#locale_parse):\n\n```js\nvar parseTime = d3.timeParse(\"%B %d, %Y\");\nparseTime(\"June 30, 2015\"); // Tue Jun 30 2015 00:00:00 GMT-0700 (PDT)\n```\n\nYou can implement more elaborate conditional time formats, too. For example, here’s a [multi-scale time format](http://bl.ocks.org/mbostock/4149176) using [time intervals](https://github.com/d3/d3-time):\n\n```js\nvar formatMillisecond = d3.timeFormat(\".%L\"),\n    formatSecond = d3.timeFormat(\":%S\"),\n    formatMinute = d3.timeFormat(\"%I:%M\"),\n    formatHour = d3.timeFormat(\"%I %p\"),\n    formatDay = d3.timeFormat(\"%a %d\"),\n    formatWeek = d3.timeFormat(\"%b %d\"),\n    formatMonth = d3.timeFormat(\"%B\"),\n    formatYear = d3.timeFormat(\"%Y\");\n\nfunction multiFormat(date) {\n  return (d3.timeSecond(date) < date ? formatMillisecond\n      : d3.timeMinute(date) < date ? formatSecond\n      : d3.timeHour(date) < date ? formatMinute\n      : d3.timeDay(date) < date ? formatHour\n      : d3.timeMonth(date) < date ? (d3.timeWeek(date) < date ? formatDay : formatWeek)\n      : d3.timeYear(date) < date ? formatMonth\n      : formatYear)(date);\n}\n```\n\nThis module is used by D3 [time scales](https://github.com/d3/d3-scale/blob/master/README.md#time-scales) to generate human-readable ticks.\n\n## Installing\n\nIf you use NPM, `npm install d3-time-format`. Otherwise, download the [latest release](https://github.com/d3/d3-time-format/releases/latest). You can also load directly from [d3js.org](https://d3js.org), either as a [standalone library](https://d3js.org/d3-time-format.v2.min.js) or as part of [D3](https://github.com/d3/d3). AMD, CommonJS, and vanilla environments are supported. In vanilla, a `d3` global is exported:\n\n```html\n<script src=\"https://d3js.org/d3-time.v1.min.js\"></script>\n<script src=\"https://d3js.org/d3-time-format.v2.min.js\"></script>\n<script>\n\nvar format = d3.timeFormat(\"%x\");\n\n</script>\n```\n\nLocale files are published to npm and can be loaded using [d3.json](https://github.com/d3/d3-request/blob/master/README.md#json). For example, to set Russian as the default locale:\n\n```js\nd3.json(\"https://cdn.jsdelivr.net/npm/d3-time-format@2/locale/ru-RU.json\", function(error, locale) {\n  if (error) throw error;\n\n  d3.timeFormatDefaultLocale(locale);\n\n  var format = d3.timeFormat(\"%c\");\n\n  console.log(format(new Date)); // понедельник,  5 декабря 2016 г. 10:31:59\n});\n```\n\n## API Reference\n\n<a name=\"timeFormat\" href=\"#timeFormat\">#</a> d3.<b>timeFormat</b>(<i>specifier</i>) [<>](https://github.com/d3/d3-time-format/blob/master/src/defaultLocale.js#L4 \"Source\")\n\nAn alias for [*locale*.format](#locale_format) on the [default locale](#timeFormatDefaultLocale).\n\n<a name=\"timeParse\" href=\"#timeParse\">#</a> d3.<b>timeParse</b>(<i>specifier</i>) [<>](https://github.com/d3/d3-time-format/blob/master/src/defaultLocale.js#L5 \"Source\")\n\nAn alias for [*locale*.parse](#locale_parse) on the [default locale](#timeFormatDefaultLocale).\n\n<a name=\"utcFormat\" href=\"#utcFormat\">#</a> d3.<b>utcFormat</b>(<i>specifier</i>) [<>](https://github.com/d3/d3-time-format/blob/master/src/defaultLocale.js#L6 \"Source\")\n\nAn alias for [*locale*.utcFormat](#locale_utcFormat) on the [default locale](#timeFormatDefaultLocale).\n\n<a name=\"utcParse\" href=\"#utcParse\">#</a> d3.<b>utcParse</b>(<i>specifier</i>) [<>](https://github.com/d3/d3-time-format/blob/master/src/defaultLocale.js#L7 \"Source\")\n\nAn alias for [*locale*.utcParse](#locale_utcParse) on the [default locale](#timeFormatDefaultLocale).\n\n<a name=\"isoFormat\" href=\"#isoFormat\">#</a> d3.<b>isoFormat</b> [<>](https://github.com/d3/d3-time-format/blob/master/src/isoFormat.js \"Source\")\n\nThe full [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) UTC time formatter. Where available, this method will use [Date.toISOString](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/toISOString) to format.\n\n<a name=\"isoParse\" href=\"#isoParse\">#</a> d3.<b>isoParse</b> [<>](https://github.com/d3/d3-time-format/blob/master/src/isoParse.js \"Source\")\n\nThe full [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) UTC time parser. Where available, this method will use the [Date constructor](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date) to parse strings. If you depend on strict validation of the input format according to ISO 8601, you should construct a [UTC parser function](#utcParse):\n\n```js\nvar strictIsoParse = d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\");\n```\n\n<a name=\"locale_format\" href=\"#locale_format\">#</a> <i>locale</i>.<b>format</b>(<i>specifier</i>) [<>](https://github.com/d3/d3-time-format/blob/master/src/locale.js#L293 \"Source\")\n\nReturns a new formatter for the given string *specifier*. The specifier string may contain the following directives:\n\n* `%a` - abbreviated weekday name.*\n* `%A` - full weekday name.*\n* `%b` - abbreviated month name.*\n* `%B` - full month name.*\n* `%c` - the locale’s date and time, such as `%x, %X`.*\n* `%d` - zero-padded day of the month as a decimal number [01,31].\n* `%e` - space-padded day of the month as a decimal number [ 1,31]; equivalent to `%_d`.\n* `%f` - microseconds as a decimal number [000000, 999999].\n* `%H` - hour (24-hour clock) as a decimal number [00,23].\n* `%I` - hour (12-hour clock) as a decimal number [01,12].\n* `%j` - day of the year as a decimal number [001,366].\n* `%m` - month as a decimal number [01,12].\n* `%M` - minute as a decimal number [00,59].\n* `%L` - milliseconds as a decimal number [000, 999].\n* `%p` - either AM or PM.*\n* `%q` - quarter of the year as a decimal number [1,4].\n* `%Q` - milliseconds since UNIX epoch.\n* `%s` - seconds since UNIX epoch.\n* `%S` - second as a decimal number [00,61].\n* `%u` - Monday-based (ISO 8601) weekday as a decimal number [1,7].\n* `%U` - Sunday-based week of the year as a decimal number [00,53].\n* `%V` - ISO 8601 week of the year as a decimal number [01, 53].\n* `%w` - Sunday-based weekday as a decimal number [0,6].\n* `%W` - Monday-based week of the year as a decimal number [00,53].\n* `%x` - the locale’s date, such as `%-m/%-d/%Y`.*\n* `%X` - the locale’s time, such as `%-I:%M:%S %p`.*\n* `%y` - year without century as a decimal number [00,99].\n* `%Y` - year with century as a decimal number, such as `1999`.\n* `%Z` - time zone offset, such as `-0700`, `-07:00`, `-07`, or `Z`.\n* `%%` - a literal percent sign (`%`).\n\nDirectives marked with an asterisk (\\*) may be affected by the [locale definition](#localeFormat).\n\nFor `%U`, all days in a new year preceding the first Sunday are considered to be in week 0. For `%W`, all days in a new year preceding the first Monday are considered to be in week 0. Week numbers are computed using [*interval*.count](https://github.com/d3/d3-time/blob/master/README.md#interval_count). For example, 2015-52 and 2016-00 represent Monday, December 28, 2015, while 2015-53 and 2016-01 represent Monday, January 4, 2016. This differs from the [ISO week date](https://en.wikipedia.org/wiki/ISO_week_date) specification (`%V`), which uses a more complicated definition!\n\nFor `%V`, per the [strftime man page](http://man7.org/linux/man-pages/man3/strftime.3.html):\n\n> In this system, weeks start on a Monday, and are numbered from 01, for the first week, up to 52 or 53, for the last week.  Week 1 is the first week where four or more days fall within the new year (or, synonymously, week 01 is: the first week of the year that contains a Thursday; or, the week that has 4 January in it).\n\nThe `%` sign indicating a directive may be immediately followed by a padding modifier:\n\n* `0` - zero-padding\n* `_` - space-padding\n* `-` - disable padding\n\nIf no padding modifier is specified, the default is `0` for all directives except `%e`, which defaults to `_`. (In some implementations of strftime and strptime, a directive may include an optional field width or precision; this feature is not yet implemented.)\n\nThe returned function formats a specified *[date](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date)*, returning the corresponding string.\n\n```js\nvar formatMonth = d3.timeFormat(\"%B\"),\n    formatDay = d3.timeFormat(\"%A\"),\n    date = new Date(2014, 4, 1); // Thu May 01 2014 00:00:00 GMT-0700 (PDT)\n\nformatMonth(date); // \"May\"\nformatDay(date); // \"Thursday\"\n```\n\n<a name=\"locale_parse\" href=\"#locale_parse\">#</a> <i>locale</i>.<b>parse</b>(<i>specifier</i>) [<>](https://github.com/d3/d3-time-format/blob/master/src/locale.js#L298 \"Source\")\n\nReturns a new parser for the given string *specifier*. The specifier string may contain the same directives as [*locale*.format](#locale_format). The `%d` and `%e` directives are considered equivalent for parsing.\n\nThe returned function parses a specified *string*, returning the corresponding [date](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date) or null if the string could not be parsed according to this format’s specifier. Parsing is strict: if the specified <i>string</i> does not exactly match the associated specifier, this method returns null. For example, if the associated specifier is `%Y-%m-%dT%H:%M:%SZ`, then the string `\"2011-07-01T19:15:28Z\"` will be parsed as expected, but `\"2011-07-01T19:15:28\"`, `\"2011-07-01 19:15:28\"` and `\"2011-07-01\"` will return null. (Note that the literal `Z` here is different from the time zone offset directive `%Z`.) If a more flexible parser is desired, try multiple formats sequentially until one returns non-null.\n\n<a name=\"locale_utcFormat\" href=\"#locale_utcFormat\">#</a> <i>locale</i>.<b>utcFormat</b>(<i>specifier</i>) [<>](https://github.com/d3/d3-time-format/blob/master/src/locale.js#L303 \"Source\")\n\nEquivalent to [*locale*.format](#locale_format), except all directives are interpreted as [Coordinated Universal Time (UTC)](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) rather than local time.\n\n<a name=\"locale_utcParse\" href=\"#locale_utcParse\">#</a> <i>locale</i>.<b>utcParse</b>(<i>specifier</i>) [<>](https://github.com/d3/d3-time-format/blob/master/src/locale.js#L308 \"Source\")\n\nEquivalent to [*locale*.parse](#locale_parse), except all directives are interpreted as [Coordinated Universal Time (UTC)](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) rather than local time.\n\n### Locales\n\n<a name=\"timeFormatLocale\" href=\"#timeFormatLocale\">#</a> d3.<b>timeFormatLocale</b>(<i>definition</i>) [<>](https://github.com/d3/d3-time-format/blob/master/src/locale.js \"Source\")\n\nReturns a *locale* object for the specified *definition* with [*locale*.format](#locale_format), [*locale*.parse](#locale_parse), [*locale*.utcFormat](#locale_utcFormat), [*locale*.utcParse](#locale_utcParse) methods. The *definition* must include the following properties:\n\n* `dateTime` - the date and time (`%c`) format specifier (<i>e.g.</i>, `\"%a %b %e %X %Y\"`).\n* `date` - the date (`%x`) format specifier (<i>e.g.</i>, `\"%m/%d/%Y\"`).\n* `time` - the time (`%X`) format specifier (<i>e.g.</i>, `\"%H:%M:%S\"`).\n* `periods` - the A.M. and P.M. equivalents (<i>e.g.</i>, `[\"AM\", \"PM\"]`).\n* `days` - the full names of the weekdays, starting with Sunday.\n* `shortDays` - the abbreviated names of the weekdays, starting with Sunday.\n* `months` - the full names of the months (starting with January).\n* `shortMonths` - the abbreviated names of the months (starting with January).\n\nFor an example, see [Localized Time Axis II](https://bl.ocks.org/mbostock/805115ebaa574e771db1875a6d828949).\n\n<a name=\"timeFormatDefaultLocale\" href=\"#timeFormatDefaultLocale\">#</a> d3.<b>timeFormatDefaultLocale</b>(<i>definition</i>) [<>](https://github.com/d3/d3-time-format/blob/master/src/defaultLocale.js \"Source\")\n\nEquivalent to [d3.timeFormatLocale](#timeFormatLocale), except it also redefines [d3.timeFormat](#timeFormat), [d3.timeParse](#timeParse), [d3.utcFormat](#utcFormat) and [d3.utcParse](#utcParse) to the new locale’s [*locale*.format](#locale_format), [*locale*.parse](#locale_parse), [*locale*.utcFormat](#locale_utcFormat) and [*locale*.utcParse](#locale_utcParse). If you do not set a default locale, it defaults to [U.S. English](https://github.com/d3/d3-time-format/blob/master/locale/en-US.json).\n\nFor an example, see [Localized Time Axis](https://bl.ocks.org/mbostock/6f1cc065d4d172bcaf322e399aa8d62f).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/d3/d3-time-format.git"
  },
  "scripts": {
    "postpublish": "git push && git push --tags && cd ../d3.github.com && git pull && cp ../${npm_package_name}/dist/${npm_package_name}.js ${npm_package_name}.v${npm_package_version%%.*}.js && cp ../${npm_package_name}/dist/${npm_package_name}.min.js ${npm_package_name}.v${npm_package_version%%.*}.min.js && git add ${npm_package_name}.v${npm_package_version%%.*}.js ${npm_package_name}.v${npm_package_version%%.*}.min.js && git commit -m \"${npm_package_name} ${npm_package_version}\" && git push && cd - && zip -j dist/${npm_package_name}.zip -- LICENSE README.md dist/${npm_package_name}.js dist/${npm_package_name}.min.js",
    "prepublishOnly": "rm -rf dist && yarn test",
    "pretest": "rollup -c",
    "test": "TZ=America/Los_Angeles tape 'test/**/*-test.js' && eslint src"
  },
  "sideEffects": [
    "./src/defaultLocale.js"
  ],
  "unpkg": "dist/d3-time-format.min.js",
  "version": "2.2.3"
}
