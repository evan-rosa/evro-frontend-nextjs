{
  "_args": [
    [
      {
        "raw": "react-numeric-input@2.2.3",
        "scope": null,
        "escapedName": "react-numeric-input",
        "name": "react-numeric-input",
        "rawSpec": "2.2.3",
        "spec": "2.2.3",
        "type": "version"
      },
      "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend/node_modules/mdbreact"
    ]
  ],
  "_from": "react-numeric-input@2.2.3",
  "_id": "react-numeric-input@2.2.3",
  "_inCache": true,
  "_location": "/react-numeric-input",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-numeric-input-2.2.3.tgz_1515858249241_0.2824719122145325"
  },
  "_npmUser": {
    "name": "vlad-ignatov",
    "email": "vlad.ignatov@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-numeric-input@2.2.3",
    "scope": null,
    "escapedName": "react-numeric-input",
    "name": "react-numeric-input",
    "rawSpec": "2.2.3",
    "spec": "2.2.3",
    "type": "version"
  },
  "_requiredBy": [
    "/mdbreact"
  ],
  "_resolved": "http://registry.npmjs.org/react-numeric-input/-/react-numeric-input-2.2.3.tgz",
  "_shasum": "4bf5918c3eafed851a80df1eb992d941002bb552",
  "_shrinkwrap": null,
  "_spec": "react-numeric-input@2.2.3",
  "_where": "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend/node_modules/mdbreact",
  "author": {
    "name": "Vladimir Ignatov"
  },
  "bugs": {
    "url": "https://github.com/vlad-ignatov/react-numeric-input/issues"
  },
  "dependencies": {},
  "description": "Number input component that can replace the native number input which is not yet very well supported and where it is, it does not have the same appearance across the browsers. Additionally this component offers more flexible options and can be used for any values (differently formatted representations of the internal numeric value).",
  "devDependencies": {
    "babel": "^6.3.26",
    "babel-core": "^6.4.5",
    "babel-eslint": "^4.1.6",
    "babel-loader": "^6.2.1",
    "babel-plugin-transform-object-assign": "^6.8.0",
    "babel-plugin-transform-runtime": "^6.4.3",
    "babel-preset-es2015": "^6.3.13",
    "babel-preset-react": "^6.3.13",
    "babel-preset-stage-0": "^6.3.13",
    "babel-runtime": "^5.8.35",
    "eslint": "^1.10.3",
    "eslint-plugin-react": "^3.15.0",
    "expect": "^1.12.2",
    "karma": "^0.13.22",
    "karma-chrome-launcher": "^0.2.1",
    "karma-firefox-launcher": "^0.1.6",
    "karma-mocha": "^0.2.0",
    "karma-opera-launcher": "^0.3.0",
    "karma-phantomjs-launcher": "^0.2.1",
    "karma-safari-launcher": "^1.0.0",
    "karma-sourcemap-loader": "^0.3.6",
    "karma-webpack": "^1.7.0",
    "mocha": "^2.3.3",
    "nightwatch": "^0.9.16",
    "phantomjs": "^1.9.18",
    "prop-types": "^15.5.8",
    "react": "^15.6.1",
    "react-dom": "^15.6.1",
    "selenium-download": "^2.0.10",
    "webpack": "^1.12.2"
  },
  "directories": {},
  "dist": {
    "shasum": "4bf5918c3eafed851a80df1eb992d941002bb552",
    "tarball": "https://registry.npmjs.org/react-numeric-input/-/react-numeric-input-2.2.3.tgz"
  },
  "gitHead": "4813c3afc5bb67a83845322af45e4bef7e7b1eef",
  "homepage": "https://github.com/vlad-ignatov/react-numeric-input#readme",
  "keywords": [
    "react",
    "input",
    "number",
    "numeric",
    "widget",
    "component"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "vlad-ignatov",
      "email": "vlad.ignatov@gmail.com"
    }
  ],
  "name": "react-numeric-input",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">=0.14.0 || ^15.6.1 || ^16.0.0"
  },
  "readme": "# <img align=\"right\" src=\"http://vlad-ignatov.github.io/react-numeric-input/examples/v2.0.0/screenshot.png\" width=\"123\"/>React Numeric Input\n\n[![Build Status](https://travis-ci.org/vlad-ignatov/react-numeric-input.svg?branch=master)](https://travis-ci.org/vlad-ignatov/react-numeric-input)\n\nNumber input component that can replace the native number input which is not yet\nvery well supported and where it is, it does not have the same appearance across\nthe browsers. Additionally this component offers more flexible options and can\nbe used for any values (differently formatted representations of the internal\nnumeric value).\n\n![Demo](https://i.imgur.com/uUnxO73.gif)\n### [**Live demo**](http://vlad-ignatov.github.io/react-numeric-input/)\n\n## Installation\n```sh\nnpm install react-numeric-input --save\n```\nThen in your scripts:\n```js\n// es6\nimport NumericInput from 'react-numeric-input';\n// or es5\nvar NumericInput = require('react-numeric-input');\n// or TypeScript\nimport * as NumericInput from \"react-numeric-input\";\n```\n\n## Usage\n##### Minimal Usage:\nThis will behave exactly like `<input type=\"number\">`. It will create an empty\nnumeric input that starts changing from zero. The difference that this works on\nany browser and does have the same appearance on each browser.\n```jsx\n<NumericInput/>\n// or:\n<NumericInput className=\"form-control\"/>\n```\n\n##### Typical Usage\nMost of the time you will need to specify `min`, `max` and `value`:\n```jsx\n<NumericInput min={0} max={100} value={50}/>\n```\n\n#### Working with floats\nYou can use `step` and `precision` props to make your input working with\nfloating point numbers:\n```jsx\n<NumericInput step={0.1} precision={2} value={50.3}/>\n```\n\n#### Snap to step\nIf you want your component to \"snap\" to the closest step value while incrementing\nor decrementing (up/down buttons or arrow keys) you can use the `snap` prop:\n```jsx\n<NumericInput step={0.5} precision={2} value={50.3} snap/>\n```\n\n#### Strict vs Loose Mode\nYou can type any value in the input as long as it is in focus. On blur, or when\nyou attempt to increment/decrement it, the value will be converted to number.\nIf you don't want this behaviour, pass `strict` in the props and any value that\ncannot be converted to number will be rejected immediately.\n\n#### Custom format\nBy default the component displays the value number as is. However, you can\nprovide your own `format` function that will be called with the numeric value\nand is expected to return the string that will be rendered in the input:\n```jsx\nfunction myFormat(num) {\n    return num + '$';\n}\n<NumericInput precision={2} value={50.3} step={0.1} format={myFormat}/>\n```\nPlease note that the example above is fine but in most situations if you have custom\n`format` function you will also need to provide custom `parse` function that is able to\nconvert whatever the `format` returns back to numeric value. In the example above the\nbuilt-in `parse` function will strip the \"$\" suffix because internally it uses `parseFloat`.\nHowever, if the `format` function was returning `\"$\" + num`, then the `parse` function\nshould do something like:\n```js\nfunction parse(stringValue) {\n    return stringValue.replace(/^\\$/, \"\");\n}\n```\n\n## Props\nName              | Type                                | Default\n------------------|-------------------------------------|:-------:\n**value**         |`number` or `string`                 |`\"\"` which converts to 0\n**min**           |`number` or `function`               |`Number.MIN_SAFE_INTEGER`\n**max**           |`number` or `function`               |`Number.MAX_SAFE_INTEGER`\n**step**          |`number` or `function`               | 1\n**precision**     |`number` or `function`               | 0\n**parse**         |`function`                           | parseFloat\n**format**        |`function`                           | none\n**className**     |`string`                             | none\n**disabled**      |`boolean`                            | none\n**readOnly**      |`boolean`                            | none\n**style**         |`object` or `false`                  | none\n**size**          |`number` or `string`                 | none\n**mobile**        |`true`, `false`, 'auto' or `function`|`auto`\n**snap**          |`boolean`                            | none (false)\n**componentClass**|`string`                             |`input`\n**strict**        |`boolean`                            |`false`\n\nAny other option is passed directly the input created by the component. Just\ndon't forget to camelCase the attributes. For example `readonly` must be `readOnly`.\nSee examples/index.html for examples.\n\n## Event Callbacks\nYou can pass callback props like `onClick`, `onMouseOver` etc. and they will be\nattached to the input element and React will call them with `null` scope and the corresponding event. However, there are few special cases to be aware of:\n\n* `onChange`  - Called with `valueAsNumber`, `valueAsString` and the `input` element. The `valueAsNumber` represents the internal numeric value while `valueAsString` is the same as the input value and might be completely different from the numeric one if custom formatting is used.\n* `onInvalid` - Will be called with `errorMessage`, `valueAsNumber` and `valueAsString`.\n* `onValid`   - There is no corresponding event in browsers. It will be called when the component transitions from invalid to valid state with the same arguments as onChange: `valueAsNumber` and `valueAsString`.\n\n## Styling\nThe component uses inline styles which you can customize. The `style` prop is not added\ndirectly to the component but instead it is a container for styles which you can overwrite.\nFor example\n```xml\n<NumericInput style={{\n\tinput: {\n\t\tcolor: 'red'\n\t}\n}}>\n```\nYou can modify the styles for everything including states like `:hover`, `:active` and\n`:disabled`. Take a look at the source to see what styles are supported. Also, the style is\nstored as static class property so that you can change it and affect all the components\nfrom your script. Example:\n```js\nimport NumericInput from 'react-numeric-input';\nNumericInput.style.input.color = 'red';\n```\n\nFinally, you can still use CSS if you want. Each component's root element has the\n`react-numeric-input` class so that it is easy to find these widgets on the page. However,\nkeep in mind that because of the inline styles you might need to use `!important` for some\nrules unless you pass `style={false}` which will disable the inline styles and you will\nhave to provide your own CSS styles for everything. Example:\n```css\n.react-numeric-input input {\n\tcolor: red;\n}\n```\n\n## Keyboard navigation\n* You can use <kbd>⬆</kbd> and <kbd>⬇</kbd> arrow keys to increment/decrement the input value.\n* <kbd>Ctrl + ⬆</kbd> or <kbd>⌘ + ⬆</kbd> and <kbd>Ctrl + ⬇</kbd> or <kbd>⌘ + ⬇</kbd> to use smaller step (`step / 10`).\n  Note that this will only work if you have specified a `precision` option that supports it.\n* <kbd>Shift + ⬆</kbd> and <kbd>Shift + ⬇</kbd> to use bigger step (`step * 10`).\n\n## Integration with external scripts\nThis component aims to provide good integration not only with React but with any third party script\nthat might want to work with it on the current page.\n\n### getValueAsNumber()\nThe native number inputs have special property called `valueAsNumber`. It provides access to the\nvalue as number to be used by scripts. In this react component this becomes even more desirable as\nthe display value might be formatted and have nothing in common with the underlying value meaning\nthat one might need to call parse to find out what the numeric value is. For that reason this\ncomponent exposes `getValueAsNumber()` method on the input element. Also keep in mind\nthat this really returns a number (float) so it might be different from the displayed value. For\nexample an input showing \"12.30\" will have `getValueAsNumber()` returning `12.3` and if the input\nis empty the result would be `0`.\n\n### setValue()\nAn external script that does not \"understand\" React can still work with this\ncomponent by reading the `getValueAsNumber()` or by calling the `setValue()`\nmethod exposed on the input element. Here is an example with jQuery:\n```js\n$('input[name=\"some-input\"]')[0].setValue('123mph');\n```\nCalling this method will invoke the component's `parse` method with the provided\nargument and then it will `setState` causing the usual re-rendering.\n\n## function props\nIn rare cases it might be better to \"decide\" what the value of certain prop is at\nruntime without having to through the entire ceremony of redux, flux, or whatever\nwill make your component to be re-rendered with other props. For example one might\nwant to have a variable `step` prop based on the current input value and the change\ndirection:\n```js\n<NumericInput step={(component, direction) => {\n\t// for values smaller than 10 the step is 0.1\n\t// for values greater than 10 the step is 0.01\n\treturn component.state.value < 10 ? 0.1 : 0.01\n\n\t// or have different step depending on the direction\n\treturn direction === NumericInput.DIRECTION_UP ? 0.01 : 0.1;\n\n\t// or just obtain it from somewhere\n\treturn window.outerWidth % 100 + 1;\n}}>\n```\nThe props that support being a function are currently `min`, `max`, `step` and\n`precision`. All those function will be passed the component instance as argument\nand the `step` will also receive the direction as second parameter.\n\n\n## License\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vlad-ignatov/react-numeric-input.git"
  },
  "scripts": {
    "build": "webpack --config ./build_config/main.js",
    "build-all": "npm run build && npm run build-dist-min && npm run build-examples",
    "build-dist": "webpack --config ./build_config/dist.js",
    "build-dist-min": "webpack --config ./build_config/dist-min.js",
    "build-examples": "npm run build-dist && webpack --config ./build_config/examples.js && cp dist/react-numeric-input.js docs/react-numeric-input.js",
    "test": "karma start",
    "test:e2e": "node ./selenium-download.js && ./node_modules/nightwatch/bin/nightwatch"
  },
  "version": "2.2.3"
}
