{
  "_args": [
    [
      {
        "raw": "typed.js@^2.0.6",
        "scope": null,
        "escapedName": "typed.js",
        "name": "typed.js",
        "rawSpec": "^2.0.6",
        "spec": ">=2.0.6 <3.0.0",
        "type": "range"
      },
      "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend/node_modules/react-typed"
    ]
  ],
  "_from": "typed.js@^2.0.6",
  "_hasShrinkwrap": false,
  "_id": "typed.js@2.0.11",
  "_location": "/typed.js",
  "_nodeVersion": "8.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/typed.js_2.0.11_1569252637315_0.5621394154501946"
  },
  "_npmUser": {
    "name": "mattboldt",
    "email": "me@mattboldt.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "typed.js@^2.0.6",
    "scope": null,
    "escapedName": "typed.js",
    "name": "typed.js",
    "rawSpec": "^2.0.6",
    "spec": ">=2.0.6 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-typed"
  ],
  "_resolved": "https://registry.npmjs.org/typed.js/-/typed.js-2.0.11.tgz",
  "_shasum": "d298a91f959f11a3803bf48b841a6fadd29640d9",
  "_shrinkwrap": null,
  "_spec": "typed.js@^2.0.6",
  "_where": "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend/node_modules/react-typed",
  "author": {
    "name": "Matt Boldt",
    "email": "me@mattboldt.com"
  },
  "bugs": {
    "url": "https://github.com/mattboldt/typed.js/issues"
  },
  "dependencies": {},
  "description": "A JavaScript Typing Animation Library",
  "devDependencies": {
    "babel": "^5.8.23",
    "babel-core": "^5.8.24",
    "babel-eslint": "^4.1.1",
    "babel-loader": "^5.3.2",
    "debug": "^2.6.9",
    "documentation": "^8.0.0",
    "eslint": "^3.19.0",
    "eslint-config-standard": "^10.2.1",
    "eslint-plugin-import": "^2.6.0",
    "eslint-plugin-node": "^5.1.0",
    "eslint-plugin-promise": "^3.5.0",
    "eslint-plugin-standard": "^3.0.1",
    "express": "^4.15.3",
    "gulp": "^3.9.0",
    "gulp-documentation": "^3.2.0",
    "gulp-eslint": "^4.0.0",
    "gulp-express": "^0.3.5",
    "gulp-livereload": "^3.8.1",
    "gulp-rename": "^1.2.2",
    "gulp-sourcemaps": "^1.5.2",
    "gulp-uglify": "^1.4.1",
    "lodash": "^4.17.5",
    "mime": "^1.4.1",
    "webpack": "^1.12.1",
    "webpack-stream": "^2.1.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-1ZORHalEyLob34q738mqmwp0pT6syMigB1SZuTItqdhovWBKFIt7I5uVALXAGQZCg2MCtihCt6uqkoqPJK+9iQ==",
    "shasum": "d298a91f959f11a3803bf48b841a6fadd29640d9",
    "tarball": "https://registry.npmjs.org/typed.js/-/typed.js-2.0.11.tgz",
    "fileCount": 57,
    "unpackedSize": 1743133,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdiOUeCRA9TVsSAnZWagAATIMP/0xiz8QtClTB/Q/gUPC5\no3SDrfzpbFzGSI2iOtvCDJLaVhGGHO1rtzdGQgWIdYhWYYVV6Zmt21IxzSE1\nTXgvx0bvWZbJCEpjqlqIMLbb7joVlug23J2QOH2FaRDzOHLVKkGj7qi1LU8x\nXRvudDJjA9WYSwOVkO7d9vVUsM+O4J68U4M6RCDAi5G81C8XyUCg2FwMCYHd\noIysNNlF1sTgRQVxhgXUZuCaNNBiSidQynFUCoW4yvEo+Y44fFDyM1TEPKqn\nfoNRJjIzfXWGx0EsyosdDFlovSkmmBpmfxIco5RdSluujJ6OBwI/5wm3qvtc\ngUw3ZyCBA1nMWhxhZYjzzHoMRwZRcV9KUCwvK3Ik4m+kSJ6VNAm97nvbjBkS\nvpxm951XZOrLQlOI0JLneT4RuAU3ijkw40W7dU/INBwR/lJX3zPiS1OnzuKt\nTwd1oRo+9dbsy1u0j4N+t4g6BGMgPlU9XCWwCgt6PzJvRAIpYi9gqlKsPx0R\ntL02VmweNX5SHZip1Uk5ySxGVgiXnB3RrMdh22xTJ6OFwqSPnr4JQAg9gd5N\ntPRWU8jgYO8CO6cGq/DCr0HgzRCxPl8XDnfj6D7FhNO3njIFPFOdVkGm5KM4\nlaj5g8V/YaL0rbpPcPl3GrRDe/huHIzX1oQ4GUYL9qeD7jP/NW5whlzjUB12\nV56+\r\n=Wv6I\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "a7dbc1c77e8dd9009a6f6b16db6df7f74bee63d5",
  "homepage": "https://github.com/mattboldt/typed.js",
  "keywords": [
    "typed",
    "animation"
  ],
  "license": "MIT",
  "main": "lib/typed.js",
  "maintainers": [
    {
      "name": "mattboldt",
      "email": "me@mattboldt.com"
    }
  ],
  "name": "typed.js",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/mattboldt/typed.js.svg?branch=typed-2.0)](https://travis-ci.org/mattboldt/typed.js)\n[![Code Climate](https://codeclimate.com/github/mattboldt/typed.js/badges/gpa.svg)](https://codeclimate.com/github/mattboldt/typed.js)\n[![GitHub release](https://img.shields.io/github/release/mattboldt/typed.js.svg)]()\n[![npm](https://img.shields.io/npm/dt/typed.js.svg)](https://img.shields.io/npm/dt/typed.js.svg)\n[![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/mattboldt/typed.js/master/LICENSE.txt)\n\n<img src=\"https://raw.githubusercontent.com/mattboldt/typed.js/master/logo-cropped.png\" width=\"450px\" title=\"Typed.js\" />\n\n### [Live Demo](http://www.mattboldt.com/demos/typed-js/) | [View All Demos](http://mattboldt.github.io/typed.js/) | [View Full Docs](http://mattboldt.github.io/typed.js/docs) | [mattboldt.com](http://www.mattboldt.com)\n\nTyped.js is a library that types. Enter in any string, and watch it type at the speed you've set, backspace what it's typed, and begin a new sentence for however many strings you've set.\n\n---\n\n## Installation\n\n#### Choose One\n\n```\nnpm install typed.js\nyarn add typed.js\nbower install typed.js\n```\n\n#### CDN\n\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/typed.js@2.0.11\"></script>\n```\n\n#### Setup\n\nThis is really all you need to get going.\n\n```javascript\n// Can also be included with a regular script tag\nimport Typed from 'typed.js';\n\nvar options = {\n  strings: ['<i>First</i> sentence.', '&amp; a second sentence.'],\n  typeSpeed: 40\n};\n\nvar typed = new Typed('.element', options);\n```\n\n## Wonderful sites that have used (or are using) Typed.js\n\nhttps://github.com/features/package-registry\n\nhttps://slack.com/\n\nhttps://envato.com/\n\nhttps://gorails.com/\n\nhttps://productmap.co/\n\nhttps://www.typed.com/\n\nhttps://apeiron.io\n\nhttps://git.market/\n\nhttps://commando.io/\n\nhttp://testdouble.com/agency.html\n\nhttps://www.capitalfactory.com/\n\nhttp://www.maxcdn.com/\n\nhttps://www.powerauth.com/\n\n---\n\n### Strings from static HTML (SEO Friendly)\n\nRather than using the `strings` array to insert strings, you can place an HTML `div` on the page and read from it.\nThis allows bots and search engines, as well as users with JavaScript disabled, to see your text on the page.\n\n```javascript\n<script>\n  var typed = new Typed('#typed', {\n    stringsElement: '#typed-strings'\n  });\n</script>\n```\n\n```html\n<div id=\"typed-strings\">\n  <p>Typed.js is a <strong>JavaScript</strong> library.</p>\n  <p>It <em>types</em> out sentences.</p>\n</div>\n<span id=\"typed\"></span>\n```\n\n### Type Pausing\n\nYou can pause in the middle of a string for a given amount of time by including an escape character.\n\n```javascript\nvar typed = new Typed('.element', {\n  // Waits 1000ms after typing \"First\"\n  strings: ['First ^1000 sentence.', 'Second sentence.']\n});\n```\n\n### Smart Backspacing\n\nIn the following example, this would only backspace the words after \"This is a\"\n\n```javascript\nvar typed = new Typed('.element', {\n  strings: ['This is a JavaScript library', 'This is an ES6 module'],\n  smartBackspace: true // Default value\n});\n```\n\n### Bulk Typing\n\nThe following example would emulate how a terminal acts when typing a command and seeing its result.\n\n```javascript\nvar typed = new Typed('.element', {\n  strings: ['git push --force ^1000\\n `pushed to origin with option force`']\n});\n```\n\n### CSS\n\nCSS animations are built upon initialzation in JavaScript. But, you can customize them at your will! These classes are:\n\n```css\n/* Cursor */\n.typed-cursor {\n}\n\n/* If fade out option is set */\n.typed-fade-out {\n}\n```\n\n### Use with ReactJS\n\nCheck out this example React app using Typed.js in a component: https://jsfiddle.net/mattboldt/ovat9jmp/\n\n### Use with Vue.js\n\nCheck out the Vue.js component: https://github.com/Orlandster/vue-typed-js\n\n### Use it as WebComponent\n\nCheck out the WebComponent: https://github.com/Orlandster/wc-typed-js\n\n## Customization\n\n```javascript\nvar typed = new Typed('.element', {\n  /**\n   * @property {array} strings strings to be typed\n   * @property {string} stringsElement ID of element containing string children\n   */\n  strings: [\n    'These are the default values...',\n    'You know what you should do?',\n    'Use your own!',\n    'Have a great day!'\n  ],\n  stringsElement: null,\n\n  /**\n   * @property {number} typeSpeed type speed in milliseconds\n   */\n  typeSpeed: 0,\n\n  /**\n   * @property {number} startDelay time before typing starts in milliseconds\n   */\n  startDelay: 0,\n\n  /**\n   * @property {number} backSpeed backspacing speed in milliseconds\n   */\n  backSpeed: 0,\n\n  /**\n   * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n   */\n  smartBackspace: true,\n\n  /**\n   * @property {boolean} shuffle shuffle the strings\n   */\n  shuffle: false,\n\n  /**\n   * @property {number} backDelay time before backspacing in milliseconds\n   */\n  backDelay: 700,\n\n  /**\n   * @property {boolean} fadeOut Fade out instead of backspace\n   * @property {string} fadeOutClass css class for fade animation\n   * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n   */\n  fadeOut: false,\n  fadeOutClass: 'typed-fade-out',\n  fadeOutDelay: 500,\n\n  /**\n   * @property {boolean} loop loop strings\n   * @property {number} loopCount amount of loops\n   */\n  loop: false,\n  loopCount: Infinity,\n\n  /**\n   * @property {boolean} showCursor show cursor\n   * @property {string} cursorChar character for cursor\n   * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\n   */\n  showCursor: true,\n  cursorChar: '|',\n  autoInsertCss: true,\n\n  /**\n   * @property {string} attr attribute for typing\n   * Ex: input placeholder, value, or just HTML text\n   */\n  attr: null,\n\n  /**\n   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n   */\n  bindInputFocusEvents: false,\n\n  /**\n   * @property {string} contentType 'html' or 'null' for plaintext\n   */\n  contentType: 'html',\n\n  /**\n   * Before it begins typing\n   * @param {Typed} self\n   */\n  onBegin: (self) => {},\n\n  /**\n   * All typing is complete\n   * @param {Typed} self\n   */\n  onComplete: (self) => {},\n\n  /**\n   * Before each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  preStringTyped: (arrayPos, self) => {},\n\n  /**\n   * After each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStringTyped: (arrayPos, self) => {},\n\n  /**\n   * During looping, after last string is typed\n   * @param {Typed} self\n   */\n  onLastStringBackspaced: (self) => {},\n\n  /**\n   * Typing has been stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingPaused: (arrayPos, self) => {},\n\n  /**\n   * Typing has been started after being stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingResumed: (arrayPos, self) => {},\n\n  /**\n   * After reset\n   * @param {Typed} self\n   */\n  onReset: (self) => {},\n\n  /**\n   * After stop\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStop: (arrayPos, self) => {},\n\n  /**\n   * After start\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStart: (arrayPos, self) => {},\n\n  /**\n   * After destroy\n   * @param {Typed} self\n   */\n  onDestroy: (self) => {}\n});\n```\n\n## Contributing\n\n### [View Contribution Guidelines](./.github/CONTRIBUTING.md)\n\n## end\n\nThanks for checking this out. If you have any questions, I'll be on [Twitter](http://www.twitter.com/atmattb).\n\nIf you're using this, let me know! I'd love to see it.\n\nIt would also be great if you mentioned me or my website somewhere. [www.mattboldt.com](http://www.mattboldt.com)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mattboldt/typed.js.git"
  },
  "version": "2.0.11"
}
