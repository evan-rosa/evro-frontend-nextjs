{
  "_args": [
    [
      {
        "raw": "react-chartjs-2@2.7.6",
        "scope": null,
        "escapedName": "react-chartjs-2",
        "name": "react-chartjs-2",
        "rawSpec": "2.7.6",
        "spec": "2.7.6",
        "type": "version"
      },
      "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend/node_modules/mdbreact"
    ]
  ],
  "_from": "react-chartjs-2@2.7.6",
  "_hasShrinkwrap": false,
  "_id": "react-chartjs-2@2.7.6",
  "_location": "/react-chartjs-2",
  "_nodeVersion": "8.11.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-chartjs-2_2.7.6_1553744004614_0.8875461082318885"
  },
  "_npmUser": {
    "name": "jerairrest",
    "email": "jeremyayerst@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-chartjs-2@2.7.6",
    "scope": null,
    "escapedName": "react-chartjs-2",
    "name": "react-chartjs-2",
    "rawSpec": "2.7.6",
    "spec": "2.7.6",
    "type": "version"
  },
  "_requiredBy": [
    "/mdbreact"
  ],
  "_resolved": "https://registry.npmjs.org/react-chartjs-2/-/react-chartjs-2-2.7.6.tgz",
  "_shasum": "b8cd29bed00bf55b9e8172b06466b4ecf2b86bfb",
  "_shrinkwrap": null,
  "_spec": "react-chartjs-2@2.7.6",
  "_where": "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend/node_modules/mdbreact",
  "author": {
    "name": "Jeremy Ayerst"
  },
  "browserify-shim": {
    "react": "global:React",
    "react-dom": "global:ReactDOM",
    "chart.js": "global:Chart"
  },
  "bugs": {
    "url": "https://github.com/jerairrest/react-chartjs-2/issues"
  },
  "dependencies": {
    "lodash": "^4.17.4",
    "prop-types": "^15.5.8"
  },
  "description": "react-chartjs-2",
  "devDependencies": {
    "@kadira/storybook": "^2.35.3",
    "babel-cli": "^6.26.0",
    "babel-core": "^6.18.2",
    "babel-eslint": "^4.1.3",
    "babel-loader": "^7.1.1",
    "babel-plugin-external-helpers": "^6.22.0",
    "babel-preset-es2015": "^6.13.2",
    "babel-preset-react": "^6.11.1",
    "babel-preset-stage-1": "^6.13.0",
    "babel-register": "^6.18.0",
    "babelify": "^7.3.0",
    "brfs": "^1.4.3",
    "canvas": "^1.6.2",
    "canvas-prebuilt": "^1.6.5-prerelease.1",
    "chai": "^3.5.0",
    "chart.js": "2.6.0",
    "cross-env": "^5.0.0",
    "css-loader": "^0.28.5",
    "debug": "^2.4.1",
    "enzyme": "^2.6.0",
    "eslint": "^1.6.0",
    "eslint-plugin-react": "^3.5.1",
    "extract-text-webpack-plugin": "^3.0.0",
    "gh-pages": "^1.0.0",
    "gulp": "^3.9.0",
    "html-webpack-plugin": "^2.30.1",
    "jsdom": "^9.8.3",
    "mocha": "^3.1.2",
    "rcolor": "^1.0.1",
    "react": "^0.14 || ^15.0.0-rc || ^15.0",
    "react-addons-test-utils": "^15.3.2",
    "react-dom": "^0.14 || ^15.0.0-rc || ^15.0",
    "rimraf": "^2.6.1",
    "rollup": "^0.47.6",
    "rollup-plugin-babel": "^3.0.2",
    "rollup-plugin-commonjs": "^8.1.0",
    "rollup-plugin-node-resolve": "^3.0.0",
    "rollup-plugin-replace": "^2.0.0",
    "rollup-plugin-uglify": "^2.0.1",
    "sinon": "^1.17.6",
    "webpack": "^3.5.5",
    "webpack-dev-server": "^2.7.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-xDr0jhgt/o26atftXxTVsepz+QYZI2GNKBYpxtLvYgwffLUm18a9n562reUJAHvuwKsy2v+qMlK5HyjFtSW0mg==",
    "shasum": "b8cd29bed00bf55b9e8172b06466b4ecf2b86bfb",
    "tarball": "https://registry.npmjs.org/react-chartjs-2/-/react-chartjs-2-2.7.6.tgz",
    "fileCount": 17,
    "unpackedSize": 501491,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcnECFCRA9TVsSAnZWagAAJyoP/jyQaoRGY2X8lf5cXSfO\nc8TAcDR1kCdAPacBjJ95IJvG23B4Eh+Y8roEYvFc02L1F8p0fewpF8P/muf2\n5RLUCnFeEaBjCIzXkghVUCeTWrSTrRzHOCKePR9sEPx2spzjNxerGeZkvXfG\nnvPgPENxbjk0VRh+XUAxxGNDdabbfy1oSt8guK4fxY4iYWC3Tlnm9lREAo70\n4Z+5ecaXeX1nP6Xtc6/TYKv6kAGOhMkR9x3DmHvEHG60ld+T1iGYyibWmJ5k\n3EHtFhWarbt5/DzisfN6i+4AHs6FxLO5S/JbIbqRZ9TSI5OxINXs/JkBEB20\nUEu3hWvu1zYGOMJ9mw96UqfN4V++HwZqkvQmPwFh8B6MAk9eL2Mgr9Zb4boV\nab0/Mdm6JobNku+othrfadZK6hpofez6hk+A6MICWd42mBim5OQL6z1M+MrX\ngt0AQZaksHHWA3zWacwiHsl2pCRwCyS/IMjBhl5opkfne/SZyDSNq9ycHBcw\n+WpEPyIpBQED6AmItW8EhmQDugad12yoGRpbEcTfCbNaz4TpTbwgvwevZLc5\n5HF4l/+3DaQCgbSPANM4GQxhYJzoVsphUm9/55wCdQJ8e9c6HKXzqbDDl3Mi\n6Fu1yTGYK1Xg6eEIbppioUsuSFxnma7F38gcx54h71pDjN9y2u+sFkSMZIaI\n/OkA\r\n=VQRk\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "ef38517a74d6683748734f80f229316b20ee3f32",
  "homepage": "https://github.com/jerairrest/react-chartjs-2",
  "jsnext:main": "es/index.js",
  "keywords": [
    "chart",
    "chart-js",
    "chart.js",
    "react-chartjs-2",
    "react chart.js"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "gor181",
      "email": "udosic.goran@gmail.com"
    },
    {
      "name": "jerairrest",
      "email": "jeremyayerst@gmail.com"
    }
  ],
  "module": "es/index.js",
  "name": "react-chartjs-2",
  "optionalDependencies": {},
  "peerDependencies": {
    "chart.js": "^2.3",
    "react": "^0.14.0 || ^15.0.0 || ^16.0.0-beta || ^16.0.0",
    "react-dom": "^0.14.0 || ^15.0.0 || ^16.0.0-beta || ^16.0.0"
  },
  "readme": "[![build status](\thttps://img.shields.io/travis/jerairrest/react-chartjs-2.svg?branch=master&style=flat-square)](https://travis-ci.org/jerairrest/react-chartjs-2)\n[![version](https://img.shields.io/npm/v/react-chartjs-2.svg?style=flat-square)](https://www.npmjs.com/package/react-chartjs-2)\n[![downloads](https://img.shields.io/npm/dm/react-chartjs-2.svg?style=flat-square)](https://npm-stat.com/charts.html?package=react-chartjs-2&from=2016-01-01)\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg?style=flat-square)](http://opensource.org/licenses/MIT)\n\n### Looking for maintainers!!\n\n# react-chartjs-2\n\nReact wrapper for [Chart.js 2](http://www.chartjs.org/docs/#getting-started)\nOpen for PRs and contributions!\n\n# UPDATE to 2.x\nAs of 2.x we have made chart.js a peer dependency for greater flexibility. Please add chart.js as a dependency on your project to use 2.x. Currently, 2.5.x is the recommended version of chart.js to use.\n\n## Demo & Examples\n\nLive demo: [jerairrest.github.io/react-chartjs-2](http://jerairrest.github.io/react-chartjs-2/)\n\nTo build the examples locally, run:\n\n```bash\nnpm install\nnpm start\n```\n\nThen open [`localhost:8000`](http://localhost:8000) in a browser.\n\n## Demo & Examples via React Storybook\n\nWe have to build the package, then you can run storybook.\n\n```bash\nnpm run build\nnpm run storybook\n```\n\nThen open [`localhost:6006`](http://localhost:6006) in a browser.\n\n\n## Installation via NPM\n\n```bash\nnpm install --save react-chartjs-2 chart.js\n```\n\n\n## Usage\n\nCheck example/src/components/* for usage.\n\n```js\nimport { Doughnut } from 'react-chartjs-2';\n\n<Doughnut data={...} />\n```\n\n### Properties\n\n* data: (PropTypes.object | PropTypes.func).isRequired,\n* width: PropTypes.number,\n* height: PropTypes.number,\n* id: PropTypes.string,\n* legend: PropTypes.object,\n* options: PropTypes.object,\n* redraw: PropTypes.bool,\n* getDatasetAtEvent: PropTypes.func,\n* getElementAtEvent: PropTypes.func,\n* getElementsAtEvent: PropTypes.func\n* onElementsClick: PropTypes.func, // alias for getElementsAtEvent (backward compatibility)\n\n### Custom size\nIn order for Chart.js to obey the custom size you need to set `maintainAspectRatio` to false, example:\n\n```js\n<Bar\n  data={data}\n  width={100}\n  height={50}\n  options={{ maintainAspectRatio: false }}\n/>\n```\n\n### Chart.js instance\nChart.js instance can be accessed by placing a ref to the element as:\n\n```js\nchartReference = {};\n\ncomponentDidMount() {\n  console.log(this.chartReference); // returns a Chart.js instance reference\n}\n\nrender() {\n  return (<Doughnut ref={(reference) => this.chartReference = reference } data={data} />)\n}\n```\n\n### Getting context for data generation\nCanvas node and hence context, that can be used to create CanvasGradient background,\nis passed as argument to data if given as function:\n\nThis approach is useful when you want to keep your components pure.\n\n```js\nrender() {\n  const data = (canvas) => {\n    const ctx = canvas.getContext(\"2d\")\n    const gradient = ctx.createLinearGradient(0,0,100,0);\n    ...\n    return {\n      ...\n      backgroundColor: gradient\n      ...\n    }\n  }\n\n  return (<Line data={data} />)\n}\n```\n\n### Chart.js Defaults\nChart.js defaults can be set by importing the `defaults` object:\n\n```javascript\nimport { defaults } from 'react-chartjs-2';\n\n// Disable animating charts by default.\ndefaults.global.animation = false;\n```\n\nIf you want to bulk set properties, try using the [lodash.merge](https://lodash.com/docs/#merge) function. This function will do a deep recursive merge preserving previously set values that you don't want to update.\n\n```js\nimport { defaults } from 'react-chartjs-2';\nimport merge from 'lodash.merge';\n// or\n// import { merge } from 'lodash';\n\nmerge(defaults, {\n  global: {\n    animation: false,\n    line: {\n      borderColor: '#F85F73',\n     },\n  },\n});\n```\n\n### Chart.js object\n\nYou can access the internal Chart.js object to register plugins or extend charts like this:\n\n```JavaScript\nimport { Chart } from 'react-chartjs-2';\n\ncomponentWillMount() {\n  Chart.pluginService.register({\n    afterDraw: function (chart, easing) {\n      // Plugin code.\n    }\n  });\n}\n```\n\n### Scatter Charts\n\nIf you're using Chart.js 2.6 and below, add the `showLines: false` property to your chart options. This was later [added](https://github.com/chartjs/Chart.js/commit/7fa60523599a56255cde78a49e848166bd233c6e) in the default config, so users of later versions would not need to do this extra step.\n\n### Events\n\n#### onElementsClick || getElementsAtEvent (function)\n\nA function to be called when mouse clicked on chart elememts, will return all element at that point as an array. [Check](https://github.com/chartjs/Chart.js/blob/master/docs/09-Advanced.md#getelementsatevente)\n\n```js\n{\n  onElementsClick: (elems) => {},\n  getElementsAtEvent: (elems) => {},\n  // `elems` is an array of chartElements\n}\n\n```\n#### getElementAtEvent (function)\n\nCalling getElementAtEvent(event) on your Chart instance passing an argument of an event, or jQuery event, will return the single element at the event position. If there are multiple items within range, only the first is returned [Check](https://github.com/chartjs/Chart.js/blob/master/docs/09-Advanced.md#getelementatevente)\n\n```js\n{\n  getElementAtEvent: (elems) => {},\n  // => returns the first element at the event point.\n}\n```\n\n#### getDatasetAtEvent (function)\n\nLooks for the element under the event point, then returns all elements from that dataset. This is used internally for 'dataset' mode highlighting [Check](https://github.com/chartjs/Chart.js/blob/master/docs/09-Advanced.md#getdatasetatevente)\n\n```js\n{\n  getDatasetAtEvent: (dataset) => {}\n  // `dataset` is an array of chartElements\n}\n```\n\n### Working with Multiple Datasets\n\nYou will find that any event which causes the chart to re-render, such as hover tooltips, etc., will cause the first dataset to be copied over to other datasets, causing your lines and bars to merge together. This is because to track changes in the dataset series, the library needs a `key` to be specified - if none is found, it can't tell the difference between the datasets while updating. To get around this issue, you can take these two approaches:\n\n1. Add a `label` property on each dataset. By default, this library uses the `label` property as the key to distinguish datasets.\n2. Specify a different property to be used as a key by passing a `datasetKeyProvider` prop to your chart component, which would return a unique string value for each dataset.\n\n## Development (`src`, `lib` and the build process)\n\n**NOTE:** The source code for the component is in `src`. A transpiled CommonJS version (generated with Babel) is available in `lib` for use with node.js, browserify and webpack. A UMD bundle is also built to `dist`, which can be included without the need for any build system.\n\nTo build, watch and serve the examples (which will also watch the component source), run `npm start`. If you just want to watch changes to `src` and rebuild `lib`, run `npm run watch` (this is useful if you are working with `npm link`).\n\n\n## License\n\n[MIT Licensed](/LICENSE.md)\nCopyright (c) 2017 Jeremy Ayerst\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jerairrest/react-chartjs-2.git"
  },
  "scripts": {
    "build": "npm run clean && npm run build:cjs && npm run build:es && npm run build:umd && npm run build:umd:min",
    "build-storybook": "build-storybook",
    "build:cjs": "babel src --out-dir lib",
    "build:es": "cross-env BABEL_ENV=jsnext babel src --out-dir es",
    "build:umd": "cross-env BABEL_ENV=rollup NODE_ENV=development rollup -c -o dist/react-chartjs-2.js",
    "build:umd:min": "cross-env BABEL_ENV=rollup NODE_ENV=production rollup -c -o dist/react-chartjs-2.min.js",
    "clean": "rimraf lib es dist",
    "examples": "webpack-dev-server --config example/webpack.config.babel.js --progress",
    "examples:build": "cross-env BABEL_ENV=development NODE_ENV=production webpack --config example/webpack.config.babel.js --progress",
    "examples:clean": "rimraf example/dist",
    "examples:deploy": "npm run examples:clean && npm run examples:build && gh-pages -d example/dist",
    "lint": "eslint ./; true",
    "start": "npm run examples",
    "storybook": "start-storybook -p 6006",
    "test": "mocha test/config/setup.js test/__tests__/**/*"
  },
  "types": "./index.d.ts",
  "version": "2.7.6"
}
