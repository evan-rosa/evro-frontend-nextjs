{
  "_args": [
    [
      {
        "raw": "next-images@^1.3.0",
        "scope": null,
        "escapedName": "next-images",
        "name": "next-images",
        "rawSpec": "^1.3.0",
        "spec": ">=1.3.0 <2.0.0",
        "type": "range"
      },
      "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend"
    ]
  ],
  "_from": "next-images@^1.3.0",
  "_hasShrinkwrap": false,
  "_id": "next-images@1.3.0",
  "_location": "/next-images",
  "_nodeVersion": "13.2.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/next-images_1.3.0_1578121766897_0.5282545743682074"
  },
  "_npmUser": {
    "name": "arefaslani",
    "email": "arefaslani@gmail.com"
  },
  "_npmVersion": "6.13.1",
  "_phantomChildren": {
    "ajv": "6.11.0",
    "ajv-keywords": "3.4.1",
    "loader-utils": "1.2.3"
  },
  "_requested": {
    "raw": "next-images@^1.3.0",
    "scope": null,
    "escapedName": "next-images",
    "name": "next-images",
    "rawSpec": "^1.3.0",
    "spec": ">=1.3.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/next-images/-/next-images-1.3.0.tgz",
  "_shasum": "14376f21b7bb80393ed713676293086966074979",
  "_shrinkwrap": null,
  "_spec": "next-images@^1.3.0",
  "_where": "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend",
  "bugs": {
    "url": "https://github.com/arefaslani/next-images/issues"
  },
  "dependencies": {
    "file-loader": "^5.0.2",
    "url-loader": "^3.0.0"
  },
  "description": "![npm](https://img.shields.io/npm/dm/next-images.svg?style=flat-square) ![npm](https://img.shields.io/npm/l/next-images.svg?style=flat-square) ![npm](https://img.shields.io/david/arefaslani/next-images.svg)",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-ieIxnSOL+WfLEM2Kkr2z9MalsAaIo4Qlb0U6knnsd1uktvqhaPZ1MgjshQP8wTBQWBg6SpXScODp011UGR22BQ==",
    "shasum": "14376f21b7bb80393ed713676293086966074979",
    "tarball": "https://registry.npmjs.org/next-images/-/next-images-1.3.0.tgz",
    "fileCount": 4,
    "unpackedSize": 5464,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeEDonCRA9TVsSAnZWagAAO5oQAJHQTBfgievUKrY3BCOp\nU8nyTuq/RlJsL5Lg8/6rOPhPW5b2p/67/C0pQ/yOV7qDQod1QhN899Pj6HC8\noiduB7fxyPO3xI5QJypcQgrA8eHN0F5ZRNxu4qpOWI8PujK6NmfV+q911iBd\nY9gKcnvEsAT7XyKuPnU4dWpb4TaiN06JU+8/73zUFu+2vSIGA7S5uccI+rFJ\n/FW7tORsEmb7++c3MXI+awaXLsFZssStDU00ioezAG8bcS9M/ErFezwvRJmr\nOrCrcN9p8+uLLK1jVrHCPf0JMO4rvq/QYiBwYtibANIenwhhsJx+LBJy+pI+\nb2YCdSF5csr+brUhUB1Tq1eeDknW4E/3vToeJeMyA+N3bSxVWWWxLrqeMlMf\ngn+yukR7+5KnCiatUOrlGMrrBRvrqof/OpWtH1SNHSQTswR6xqaDWt9LAPuY\nHEzLLfEzi+vAkDg/5MKGZ+3TkGXC9BMrOYf7ozsLzjWiKzQTLkRDQdmeb4NY\nupSLhON1MrxOZcCY8xP+Popm+oGYVYfn/35Dcw1XgpS+MWpEhMPvY8ui/43e\nDkWaxH3bA9kGMr/1KUowaoU66olE/Lj+XKfKnIF7laLVO/uOkvpQV3nhlma6\nmftyY5fS9kosn3NoeQG0FwRDSDfET4v4aZDg9NcWbg2NeT36hx53+VVPOScJ\n93T0\r\n=rlkS\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "a7a6e3269a715b0ce47d4a6fb39ed6fc1cd00a03",
  "homepage": "https://github.com/arefaslani/next-images#readme",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "arefaslani",
      "email": "arefaslani@gmail.com"
    }
  ],
  "name": "next-images",
  "optionalDependencies": {},
  "readme": "# Next.js + Images\n![npm](https://img.shields.io/npm/dm/next-images.svg?style=flat-square)\n![npm](https://img.shields.io/npm/l/next-images.svg?style=flat-square)\n![npm](https://img.shields.io/david/arefaslani/next-images.svg)\n\nImport images in [Next.js](https://github.com/zeit/next.js)\n(jpg, jpeg, svg, png, ico, webp and gif images)\n\n## Features\n* Load images from local computer\n* Load images from remote (CDN for example) [by setting assetPrefix](https://github.com/zeit/next.js/#dynamic-assetprefix)\n* Inline small images to Base64 for reducing http requests\n* Adds a content hash to the file name so images can get cached\n\nIf you also want image minimalization and optimization have a look at [next-optimized-images](https://github.com/cyrilwanner/next-optimized-images)\n\n## Installation\n\n```\nnpm install --save next-images\n```\n\nor\n\n```\nyarn add next-images\n```\n\n## Usage\n\nCreate a `next.config.js` in your project\n\n```js\n// next.config.js\nconst withImages = require('next-images')\nmodule.exports = withImages()\n```\n\nOptionally you can add your custom Next.js configuration as parameter\n\n```js\n// next.config.js\nconst withImages = require('next-images')\nmodule.exports = withImages({\n  webpack(config, options) {\n    return config\n  }\n})\n```\n\nAnd in your components or pages simply import your images:\n\n```js\nexport default () => <div>\n  <img src={require('./my-image.jpg')} />\n</div>\n```\nor\n```js\nimport img from './my-image.jpg'\n\nexport default () => <div>\n  <img src={img} />\n</div>\n```\n\n## Options\n\n### assetPrefix\nYou can serve remote images by setting ***assetPrefix*** option.\n\nExample usage:\n```js\n// next.config.js\nconst withImages = require('next-images')\nmodule.exports = withImages({\n  assetPrefix: 'https://example.com',\n  webpack(config, options) {\n    return config\n  }\n})\n```\n\n### InlineImageLimit\nInlines images with sizes below ***inlineImageLimit*** to Base64. Default value is 8192.\n\nExample usage:\n```js\n// next.config.js\nconst withImages = require('next-images')\nmodule.exports = withImages({\n  inlineImageLimit: 16384,\n  webpack(config, options) {\n    return config\n  }\n})\n```\n\n### Exclude\nFolders that you want to exclude from the loader. Useful for `svg-react-loader` for example.\n\nExample usage:\n```js\n// next.config.js\nconst path = require('path');\nconst withImages = require('next-images')\nmodule.exports = withImages({\n  exclude: path.resolve(__dirname, 'src/assets/svg'),\n  webpack(config, options) {\n    return config\n  }\n})\n```\n\n### ES Modules\n> By default, file-loader generates JS modules that use the ES modules syntax. There are some cases in which using ES modules is beneficial, like in the case of module concatenation and tree shaking.\n\nES Modules are disabled by default. You can enable them by using `esModule` config option:\n\n```javascript\nconst withImages = require('next-images')\nmodule.exports = withImages({\n  esModule: true,\n  webpack(config, options) {\n    return config\n  }\n})\n```\n\nBy enabling ES modules you should change your require statements and get default property out of them:\n\n```javascript\n<img src={require(\"./img.png\").default}>\n```\n\nimport statement should be as before.\n\n```javascript\nimport img from \"./img.png\";\n```\n\n### Typescript\nTypescript doesn't know how interpret imported images. `next-images` package contains definitions for image modules,\n**you need to add reference to next-images types** (third line) into your `next-env.d.ts` file.\n\n```diff\n/// <reference types=\"next\" />\n/// <reference types=\"next/types/global\" />\n\n+ /// <reference types=\"next-images\" />\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/arefaslani/next-images.git"
  },
  "types": "index.d.ts",
  "version": "1.3.0"
}
