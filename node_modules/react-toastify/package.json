{
  "_args": [
    [
      {
        "raw": "react-toastify@5.1.0",
        "scope": null,
        "escapedName": "react-toastify",
        "name": "react-toastify",
        "rawSpec": "5.1.0",
        "spec": "5.1.0",
        "type": "version"
      },
      "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend/node_modules/mdbreact"
    ]
  ],
  "_from": "react-toastify@5.1.0",
  "_hasShrinkwrap": false,
  "_id": "react-toastify@5.1.0",
  "_location": "/react-toastify",
  "_nodeVersion": "10.15.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-toastify_5.1.0_1555443180385_0.9878905670578555"
  },
  "_npmUser": {
    "name": "sniphpet",
    "email": "fdkhadra@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {
    "dom-helpers": "3.4.0",
    "loose-envify": "1.4.0",
    "prop-types": "15.7.2",
    "react-lifecycles-compat": "3.0.4"
  },
  "_requested": {
    "raw": "react-toastify@5.1.0",
    "scope": null,
    "escapedName": "react-toastify",
    "name": "react-toastify",
    "rawSpec": "5.1.0",
    "spec": "5.1.0",
    "type": "version"
  },
  "_requiredBy": [
    "/mdbreact"
  ],
  "_resolved": "https://registry.npmjs.org/react-toastify/-/react-toastify-5.1.0.tgz",
  "_shasum": "aefe1f084bf4733f083423f013d24242cb63c482",
  "_shrinkwrap": null,
  "_spec": "react-toastify@5.1.0",
  "_where": "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend/node_modules/mdbreact",
  "author": {
    "name": "Fadi Khadra",
    "email": "fdkhadra@gmail.com",
    "url": "https://fkhadra.github.io"
  },
  "bugs": {
    "url": "https://github.com/fkhadra/react-toastify/issues"
  },
  "dependencies": {
    "@babel/runtime": "^7.4.2",
    "classnames": "^2.2.6",
    "prop-types": "^15.7.2",
    "react-transition-group": "^2.6.1"
  },
  "description": "React notification made easy",
  "devDependencies": {
    "@babel/cli": "^7.0.0",
    "@babel/core": "^7.0.0",
    "@babel/plugin-proposal-class-properties": "^7.0.0",
    "@babel/plugin-transform-modules-commonjs": "^7.0.0",
    "@babel/plugin-transform-runtime": "^7.4.0",
    "@babel/preset-env": "^7.0.0",
    "@babel/preset-react": "^7.0.0",
    "@types/react": "^16.4.12",
    "@types/react-transition-group": "^2.0.13",
    "babel-core": "7.0.0-bridge.0",
    "babel-eslint": "^9.0.0",
    "babel-jest": "^23.4.2",
    "babel-loader": "^8.0.0",
    "babel-plugin-transform-react-remove-prop-types": "^0.4.24",
    "coveralls": "^3.0.2",
    "cross-env": "^5.2.0",
    "css-loader": "^1.0.0",
    "cssnano": "^4.1.0",
    "cssnano-cli": "^1.0.5",
    "enzyme": "^3.5.0",
    "enzyme-adapter-react-16": "^1.3.0",
    "enzyme-to-json": "^3.3.4",
    "eslint": "^5.4.0",
    "eslint-config-react-app": "^2.1.0",
    "eslint-plugin-flowtype": "^2.50.0",
    "eslint-plugin-import": "^2.14.0",
    "eslint-plugin-jsx-a11y": "^6.1.1",
    "eslint-plugin-react": "^7.11.1",
    "html-webpack-plugin": "^3.2.0",
    "jest": "^23.5.0",
    "jest-cli": "^23.5.0",
    "node-sass": "^4.9.3",
    "postcss": "^7.0.2",
    "postcss-cli": "^6.0.0",
    "prettier": "^1.14.2",
    "raf": "^3.4.0",
    "react": "^16.4.2",
    "react-dom": "^16.4.2",
    "react-test-renderer": "^16.4.2",
    "regenerator-runtime": "^0.12.1",
    "rimraf": "^2.6.2",
    "rollup": "^1.7.1",
    "rollup-plugin-babel": "^4.3.2",
    "rollup-plugin-commonjs": "^9.2.1",
    "rollup-plugin-node-resolve": "^4.0.1",
    "rollup-plugin-size-snapshot": "^0.8.0",
    "rollup-plugin-uglify": "^6.0.2",
    "sass-loader": "^7.1.0",
    "style-loader": "^0.23.0",
    "webpack": "^4.17.1",
    "webpack-cli": "^3.1.0",
    "webpack-dev-server": "^3.1.7"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-0kVAAE7VO609EeXLVaFHDTc6Bnd/OUAb7rrRAwMsHeaThKEhH+WEQEPftTjuA4rP59K0QhCnWu4Ds2hXAcFxaw==",
    "shasum": "aefe1f084bf4733f083423f013d24242cb63c482",
    "tarball": "https://registry.npmjs.org/react-toastify/-/react-toastify-5.1.0.tgz",
    "fileCount": 21,
    "unpackedSize": 179725,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcti3tCRA9TVsSAnZWagAAupgP/1xV1/zKdjriKDIlXZwv\nTo8qqb0XBNWeojfS+cfkS/5DdZS1dEnXN/DrPopDgdOZwaheaKgTJhvUCADn\nTc2L3OyRPmWCN0qNG12zQaM7bZcfG5YK+7fTnT22nI2dxLPJJWwB45/8KIz8\nnouQdTHSqiRsye2G2RHgDAr5konAAfgBL1csYt3okkqNhO/ON/ALA+1LdjSO\nx4apF88M8zpCLiZi65LuzjHZcjOIdSb7k+yTX1uxSIpAi//5IZJkIS0En2bz\n21xqar9J0bjsEpPGMRtRh56xpTWwitm0+WETz8NSc6Yfz3IMfwZ3EEw2r5iR\n4XJHGdMjdVWnqrmrrgfnKwJKktSMo0nxAK0izZ09HWGuEkmXeW45DBWR2/T+\nzJkA5hqBpnV7pEvHMl1gZtiEIy51rTA4qT1TFMpnm6Wg5Zc8ORUuXmuhLqlw\nrdFQHhWNwNNOyNtCFIiDdxAWpxtY6edvPo6tFnvak8M5IwFL2Ty5+Iofqt+b\ntGkb5hEK4yMuR08k6GoQ6Gzvbag6/j/ZSddRbnvyAdccZ2wNPH+VnTXHN0+q\nKYs3XlWwlyugDHcixeikZwfjBwc+ULWLZGDsRqRNL1bj0j9//5r1e3fhXK4t\nt+MIlS4wzcGagfgl3LuwlwZhmztm0HImv6lS9iLVoj8Ndd/EozsSQWbGQQQ8\n4mHS\r\n=w3LT\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "esm",
    "dist",
    "cjs",
    "scss",
    "index.js",
    "index.d.ts"
  ],
  "gitHead": "55a57893e35d5392d3af25ada8dd4b60f2a8e792",
  "homepage": "https://github.com/fkhadra/react-toastify#readme",
  "jest": {
    "verbose": true,
    "setupFiles": [
      "raf/polyfill",
      "<rootDir>/setupTests.js"
    ]
  },
  "keywords": [
    "react",
    "notification",
    "toast",
    "react-component",
    "react-toastify",
    "push",
    "alert"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "sniphpet",
      "email": "fdkhadra@gmail.com"
    }
  ],
  "module": "esm/react-toastify.js",
  "name": "react-toastify",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": ">=15.0.0",
    "react-dom": ">=15.0.0"
  },
  "readme": "# React-Toastify\n\n![Travis (.org)](https://img.shields.io/travis/fkhadra/react-toastify.svg?label=%F0%9F%9A%A7Build&style=for-the-badge)\n![npm](https://img.shields.io/npm/dm/react-toastify.svg?label=%E2%8F%ACdownloads&style=for-the-badge)\n![npm](https://img.shields.io/npm/v/react-toastify.svg?style=for-the-badge)\n![NPM](https://img.shields.io/npm/l/react-toastify.svg?label=%F0%9F%93%9Clicense&style=for-the-badge)\n![Coveralls github](https://img.shields.io/coveralls/github/fkhadra/react-toastify.svg?label=%E2%9B%B1coverage&style=for-the-badge)\n![React toastify](https://user-images.githubusercontent.com/5574267/35336500-e58f35b6-0118-11e8-800b-2da6594fc700.gif \"React toastify\")\n\n\n🎉 React-Toastify allow you to add notification to your app with ease. No more nonsense!\n\n  - [Demo](#demo)\n  - [Installation](#installation)\n  - [Features](#features)\n  - [Usage](#usage)\n    - [One component to rule them all](#one-component-to-rule-them-all)\n      - [One ToastContainer to render them](#one-toastcontainer-to-render-them)\n      - [What if I told you that the ToastContainer is optional](#what-if-i-told-you-that-the-toastcontainer-is-optional)\n      - [Multi container support](#multi-container-support)\n    - [Positioning toast](#positioning-toast)\n    - [Set autoclose delay or disable it](#set-autoclose-delay-or-disable-it)\n    - [Render a component](#render-a-component)\n    - [Remove a toast programmatically](#remove-a-toast-programmatically)\n    - [Usage with redux](#usage-with-redux)\n    - [Pause toast timer when the window loses focus](#pause-toast-timer-when-the-window-loses-focus)\n    - [Use a custom id](#use-a-custom-id)\n    - [Prevent duplicate](#prevent-duplicate)\n    - [Delay notification appearance](#delay-notification-appearance)\n    - [Use a controlled progress bar](#use-a-controlled-progress-bar)\n    - [Update a toast](#update-a-toast)\n      - [Basic example](#basic-example)\n      - [Update the content](#update-the-content)\n      - [Update the toast id](#update-the-toast-id)\n      - [Apply a transition](#apply-a-transition)\n      - [Reset option or inherit from ToastContainer](#reset-option-or-inherit-from-toastcontainer)\n    - [Define callback](#define-callback)\n    - [Listen for change](#listen-for-change)\n    - [Set a custom close button or simply remove it](#set-a-custom-close-button-or-simply-remove-it)\n      - [Override the default one](#override-the-default-one)\n      - [Define it per toast](#define-it-per-toast)\n      - [Remove it](#remove-it)\n    - [Add an undo option to a toast like google drive](#add-an-undo-option-to-a-toast-like-google-drive)\n    - [Replace the default transition](#replace-the-default-transition)\n    - [Define a custom enter and exit transition](#define-a-custom-enter-and-exit-transition)\n      - [Ease your life with the cssTransition helper](#ease-your-life-with-the-csstransition-helper)\n        - [Different duration for enter and exit](#different-duration-for-enter-and-exit)\n        - [Handle transition based on the toast position](#handle-transition-based-on-the-toast-position)\n      - [Create a transition from scratch](#create-a-transition-from-scratch)\n    - [Swipe to remove](#swipe-to-remove)\n      - [Define the width percentage to remove the toast](#define-the-width-percentage-to-remove-the-toast)\n      - [Disable it](#disable-it)\n    - [Le style](#le-style)\n      - [style with css classes](#style-with-css-classes)\n      - [style with glamor](#style-with-glamor)\n      - [Define style globally](#define-style-globally)\n      - [Right to left support](#right-to-left-support)\n    - [Mobile](#mobile)\n  - [Api](#api)\n    - [ToastContainer](#toastcontainer)\n    - [toast](#toast)\n    - [cssTransition](#csstransition)\n  - [Browser Support](#browser-support)\n  - [Release Notes](#release-notes)\n  - [Contribute](#contribute)\n  - [License](#license)\n\n## Demo\n\n[A demo is worth a thousand words](https://fkhadra.github.io/react-toastify/)\n\n## Installation\n\n```\n$ npm install --save react-toastify\n$ yarn add react-toastify\n```\n\n> RC.5 `useLazyContainer has been removed. The lazy container is opt-in`\n\n## Features\n\n- Easy to setup for real, you can make it work in less than 10sec!\n- Super easy to customize\n- RTL support\n- Swipe to close 👌\n- Can display a react component inside the toast!\n- Has ```onOpen``` and ```onClose``` hooks. Both can access the props passed to the react component rendered inside the toast\n- Can remove a toast programmatically\n- Define behavior per toast\n- Pause toast when window loses focus 👁\n- Fancy progress bar to display the remaining time\n- Possibility to update a toast\n- You can controll the progress bar a la npgrogress 😲\n- Starting v5 the `ToastContainer` is optional if you want to 😎\n\n## Usage\n\n### One component to rule them all\n\n#### One ToastContainer to render them\n\nThe toasts inherit ToastContainer's props. **Props defined on toast supersede ToastContainer's props.**\n\n```javascript\n  import React, { Component } from 'react';\n  import { ToastContainer, toast } from 'react-toastify';\n  import 'react-toastify/dist/ReactToastify.css';\n  // minified version is also included\n  // import 'react-toastify/dist/ReactToastify.min.css';\n\n  class App extends Component {\n    notify = () => toast(\"Wow so easy !\");\n\n    render(){\n      return (\n        <div>\n          <button onClick={this.notify}>Notify !</button>\n          <ToastContainer />\n        </div>\n      );\n    }\n  }\n```\n\nRemember to render the `ToastContainer` *once* in your application tree. \nIf you can't figure out where to put it, rendering it in the application root would be the best bet.\n\n#### What if I told you that the ToastContainer is optional\n\n```javascript\n  import React, { Component } from 'react';\n  import { toast } from 'react-toastify';\n  import 'react-toastify/dist/ReactToastify.css';\n\n  // Call it once in your app. At the root of your app is the best place\n  toast.configure()\n\n  const App = () => {\n    const notify = () => toast(\"Wow so easy !\");\n    \n    return <button onClick={notify}>Notify !</button>;\n  }\n```\n\nThe library will mount a `ToastContainer` for you if none is mounted. \n\n\n#### Configure the ToastContainer when it is mounted on demand\n\nThe configure function accept the same props as the ToastContainer. As soon as the container is\nrendered call to configure will have no effect.\n\n```js\ntoast.configure({\n  autoClose: 8000,\n  draggable: false,\n  //etc you get the idea\n});\n```\n\n\n#### Multi container support\n\nTo enable multiple container support, you have to pass `enableMultiContainer` and specify a `containerId` and use it in\neach toast, to do so add `containerId` to the toast's options object.\n\n\n\nNote: adding `enableMultiContainer` prop to the `<ToastContainer/ >` will:\n- Check each toast to verify if its `containerId` match the container `containerId` so it can be rendered.\n- Ensure not to render any `toast` that has `containerId`.\n- Render any toast if both the `toast` and `<ToastContainer/ >`  does not include `containerId` and `containerId` respectively.\n\nA simple example to demonstrate multi toast container capability.\n\n- Notify A button will show a toast on the bottom left.\n- Notify B button will show a toast on the top right.\n   \n```javascript\n  import React, { Component } from 'react';\n  import { ToastContainer, toast } from 'react-toastify';\n  import 'react-toastify/dist/ReactToastify.css';\n\n\n class App extends Component {\n    notifyA = () => toast('Wow so easy !', {containerId: 'A'});\n    notifyB = () => toast('Wow so easy !', {containerId: 'B'});\n\n    render(){\n      return (\n        <div>\n            <ToastContainer enableMultiContainer containerId={'A'} position={toast.POSITION.BOTTOM_LEFT} />\n            <ToastContainer enableMultiContainer containerId={'B'} position={toast.POSITION.TOP_RIGHT} />\n     \n            <button onClick={this.notifyA}>Notify A !</button>\n            <button onClick={this.notifyB}>Notify B !</button>          \n        </div>\n      );\n    }\n  }\n\n```\n\n\n### Positioning toast\n\nBy default, all the toasts will be positioned on the top right of your browser. If a position is set on a `toast`, the one defined on ToastContainer will be replaced.\n\nThe following values are allowed: **top-right, top-center, top-left, bottom-right, bottom-center, bottom-left**\n\nFor convenience, `toast` expose a POSITION property to avoid any typo.\n\n```javascript\n // toast.POSITION.TOP_LEFT, toast.POSITION.TOP_RIGHT, toast.POSITION.TOP_CENTER\n // toast.POSITION.BOTTOM_LEFT,toast.POSITION.BOTTOM_RIGHT, toast.POSITION.BOTTOM_CENTER\n\n  import React, { Component } from 'react';\n  import { toast } from 'react-toastify';\n\n  class Position extends Component {\n    notify = () => {\n      toast(\"Default Notification !\");\n\n      toast.success(\"Success Notification !\", {\n        position: toast.POSITION.TOP_CENTER\n      });\n\n      toast.error(\"Error Notification !\", {\n        position: toast.POSITION.TOP_LEFT\n      });\n\n      toast.warn(\"Warning Notification !\", {\n        position: toast.POSITION.BOTTOM_LEFT\n      });\n\n      toast.info(\"Info Notification !\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n\n      toast(\"Custom Style Notification with css class!\", {\n        position: toast.POSITION.BOTTOM_RIGHT,\n        className: 'foo-bar'\n      });\n    };\n\n    render(){\n      return <button onClick={this.notify}>Notify</button>;\n    }\n  }\n```\n\n### Set autoclose delay or disable it\n\n- Set the default delay\n\n```js\n  import React from 'react';\n  import { ToastContainer } from 'react-toastify';\n\n  // close toast after 8 seconds\n  const App = () => (\n    <ToastContainer autoClose={8000} />\n  );\n```\n\n- Set the delay per toast for more control\n\n```js\n  import React from 'react';\n  import { ToastContainer, toast } from 'react-toastify';\n\n  class App extends Component {\n    closeAfter15 = () => toast(\"YOLO\", { autoClose: 15000 });\n\n    closeAfter7 = () => toast(\"7 Kingdoms\", { autoClose: 7000 });\n\n    render(){\n      return (\n        <div>\n          <button onClick={this.closeAfter15}>Close after 15 seconds</button>\n          <button onClick={this.closeAfter7}>Close after 7 seconds</button>\n          <ToastContainer autoClose={8000} />\n        </div>\n      );\n    }\n  }\n```\n\n- Disable it by default\n\n```js\n    <ToastContainer autoClose={false} />\n```\n\n- Disable it per toast\n\n```js\n    toast(\"hello\", {\n      autoClose: false\n    })\n```\n\n### Render a component\n\nWhen you render a component, a `closeToast` function is passed as a props. That way you can close the toast on user interaction for example.\n\n```js\nimport React from 'react';\nimport { ToastContainer, toast } from \"react-toastify\";\n\nconst Msg = ({ closeToast }) => (\n  <div>\n    Lorem ipsum dolor\n    <button>Retry</button>\n    <button onClick={closeToast}>Close</button>\n  </div>\n)\n\nconst App = () => (\n  <div>\n    <button onClick={() => toast(<Msg />)}>Hello 😀</button>\n    <ToastContainer />\n  </div>\n);\n```\n\nYou can also render a component using a function. More or less like a \"render props\":\n\n```js\ntoast(({ closeToast }) => <div>Functional swag 😎</div>);\n```\n\n### Remove a toast programmatically\n\nAn id is returned each time you display a toast, use it to remove a given toast programmatically by calling ```toast.dismiss(id)```\n\nWithout args, all the displayed toasts will be removed.\n\n```javascript\n  import React, { Component } from 'react';\n  import { toast } from 'react-toastify';\n\n  class Example extends Component {\n    toastId = null;\n\n    notify = () => this.toastId = toast(\"Lorem ipsum dolor\");\n\n    dismiss = () =>  toast.dismiss(this.toastId);\n\n    dismissAll = () =>  toast.dismiss();\n\n    render(){\n      return (\n        <div>\n          <button onClick={this.notify}>Notify</button>\n          <button onClick={this.dismiss}>Dismiss</button>\n          <button onClick={this.dismissAll}>Dismiss All</button>\n        </div>\n      );\n    }\n  }\n```\n\n### Usage with redux\n\n\"Talk is cheap. Show me the code\"\n\n[![Edit react+redux+react-toastify](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/2485wxy78j)\n\n### Pause toast timer when the window loses focus\n\nThe default behavior is to pause the toast timer whenever the window loses focus. You can opt-out by setting the `pauseOnFocusLoss` props to false:\n\n```js\n// Opt-out for all toast\n<ToastContainer pauseOnFocusLoss={false} />\n\n// Opt-out per toast\ntoast('Hello', {\n  pauseOnFocusLoss: false\n})\n```\n\n### Use a custom id\n\nA custom `toastId` can be used to replace the one generated. You can use a `number` or a `string`.\n\n```javascript\n  import React, { Component } from 'react';\n  import { toast } from 'react-toastify';\n\n  class Example extends Component {\n    notify = () => {\n      toast(\"I cannot be duplicated !\", {\n        toastId: 13\n      });\n    }\n\n    render(){\n      return (\n        <div>\n          <button onClick={this.notify}>Notify</button>\n        </div>\n      );\n    }\n  }\n```\n\n### Prevent duplicate\n\nTo prevent duplicates, you can check if a given toast is active by calling `toast.isActive(id)` like the snippet below. Or, you can use a custom `toastId`:\n\n```javascript\n  import React, { Component } from 'react';\n  import { toast } from 'react-toastify';\n\n  class Example extends Component {\n    toastId = null;\n    customToastId = 'xxx-yyy';\n\n    notify = () => {\n      if (! toast.isActive(this.toastId)) {\n        this.toastId = toast(\"I cannot be duplicated !\");\n      }\n\n      toast(\"xxx-yyy cannot be duplicated\", {\n        toastId: customToastId\n      });\n    }\n\n    render(){\n      return (\n        <div>\n          <button onClick={this.notify}>Notify</button>\n        </div>\n      );\n    }\n  }\n```\n\n### Delay notification appearance\n\nYou can delay the notification appearance as shown below. Under the hood the lib simply use `setTimeout`. \n\n```js\ntoast('Show now');\ntoast('Show after 1sec', { delay: 1000 })\n```\n\n### Use a controlled progress bar\n\nImagine you want to see the progress of a file upload. The example below feature axios, but it works with anything!\n\n```javascript\n  import React, { Component } from 'react';\n  import { toast } from 'react-toastify';\n  import axios from 'axios';\n\n  class Example extends Component {\n    upload = () => {\n      // we need to keep a reference of the toastId to be able to update it\n      let toastId = null;\n\n      axios.request({\n        method: \"post\", \n        url: \"/foobar\", \n        data: myData, \n        onUploadProgress: p => {\n          const progress = p.loaded / p.total;\n\n          // check if we already displayed a toast\n          if(toastId === null){\n              toastId = toast('Upload in Progress', {\n              progress: progress\n            });\n          } else {\n            toast.update(toastId, {\n              progress: progress\n            })\n          }\n        }\n      }).then (data => {\n        // Upload is done! \n        // The remaining progress bar will be filled up\n        // The toast will be closed when the transition end\n        toast.done(toast.id)\n      })\n    }\n\n    render(){\n      return (\n        <div>\n          <button onClick={this.upload}>Upload something</button>\n        </div>\n      );\n    }\n  }\n```\n\n### Update a toast\n\nWhen you update a toast, the toast options and the content are inherited but don't worry you can update them.\n\n![update-without-transition](https://user-images.githubusercontent.com/5574267/33761953-1ce2e0ea-dc0b-11e7-8967-a63c1185ce0e.gif)\n\n#### Basic example\n\n```js\nimport React, { Component } from 'react';\nimport { toast } from 'react-toastify';\n\nclass Update extends Component {\n  toastId = null;\n\n  notify = () => this.toastId = toast(\"Hello\", { autoClose: false });\n\n  update = () => toast.update(this.toastId, { type: toast.TYPE.INFO, autoClose: 5000 });\n\n  render(){\n      return (\n        <div>\n          <button onClick={this.notify}>Notify</button>\n          <button onClick={this.update}>Update</button>\n        </div>\n      )\n  }\n}\n```\n\n#### Update the content\n\nIf you want to change the content it's straightforward as well. You can render any valid element including a react component. Pass your value to a `render` option as follow:\n\n```js\n // With a string\n toast.update(this.toastId, {\n    render: \"New content\",\n    type: toast.TYPE.INFO,\n    autoClose: 5000\n  });\n\n// Or with a component\ntoast.update(this.toastId, {\n    render: <MyComponent />\n    type: toast.TYPE.INFO,\n    autoClose: 5000\n  });\n```\n\n#### Update the toast id\n\nIf you want to update the `toastId` it can be done. But don't forget to use the new id!\n\n```js\nconst myNewToastId = 'loremIpsum';\n\ntoast.update(this.toastId, {\n  render: \"New content\",\n  type: toast.TYPE.INFO,\n  autoClose: 5000,\n  toastId: myNewToastId\n});\n\ntoast.update(myNewToastId, {\n  render: <MyComponent />\n  autoClose: 6000\n}); \n```\n\n#### Apply a transition\n\nBy default, when you update a toast, there is no transition applied. If you want to apply a transition, it can be done via the `className` or the `transition` option:\n\n![update-with-transition](https://user-images.githubusercontent.com/5574267/33761952-1cc9d55a-dc0b-11e7-9a05-29186ea1c1f0.gif)\n\n```js\n// with css\ntoast.update(this.toastId, {\n  render: \"New Content\",\n  type: toast.TYPE.INFO,\n  //Here the magic\n  className: 'rotateY animated'\n})\n\n// with glamor\ntoast.update(this.toastId, {\n  render: \"New Content\",\n  type: toast.TYPE.INFO,\n  //Here the magic\n  className: css({\n    transform: \"rotateY(360deg)\",\n    transition: \"transform 0.6s\"\n  })\n})\n\n// with transition\ntoast.update(this.toastId, {\n  render: \"New Content\",\n  type: toast.TYPE.INFO,\n  //Here the magic\n  transition: Rotate\n})\n\n```\n\n#### Reset option or inherit from ToastContainer\n\nIf you want to inherit props from the `ToastContainer`, you can reset an option by passing null.\nIt's particulary useful when you remove the `closeButton` from a toast and you want it back during the update:\n\n```js\nclass Update extends Component {\n  toastId = null;\n\n  notify = () => this.toastId = toast(\"Hello\", {\n      autoClose: false,\n      closeButton: false // Remove the closeButton\n    });\n\n  update = () => toast.update(this.toastId, {\n      type: toast.TYPE.INFO,\n      autoClose: 5000,\n      closeButton: null // The closeButton defined on ToastContainer will be used\n    });\n\n  render(){\n      return (\n        <div>\n          <button onClick={this.notify}>Notify</button>\n          <button onClick={this.update}>Update</button>\n        </div>\n      )\n  }\n}\n```\n\n### Define callback\n\nYou can define two callbacks on `toast`. They are really useful when the toast are not used only to display messages.\n\n- onOpen is called inside componentDidMount\n- onClose is called inside componentWillUnmount\n\n```javascript\n  import React, { Component } from 'react';\n  import { toast } from 'react-toastify';\n\n  class Hook extends Component {\n    notify = () => toast(<MyComponent foo=\"bar\" />, {\n      onOpen: ({ foo }) => window.alert('I counted to infinity once then..'),\n      onClose: ({ foo }) => window.alert('I counted to infinity twice')\n    });\n\n    render(){\n      return <button onClick={this.notify}>Notify</button>;\n    }\n  }\n```\n\n### Listen for change\n\nIf you want to know when a toast is displayed or removed, `toast` expose a `onChange` method:\n\n```js\ntoast.onChange( numberOfToastDisplayed => {\n  // Do whatever you want\n});\n```\n\n### Set a custom close button or simply remove it\n\n#### Override the default one\n\nYou can pass a custom close button to the `ToastContainer` to replace the default one.\n\n⚠️ **When you use a custom close button, your button will receive a ```closeToast``` function.\nYou need to call it in order to close the toast.** ⚠️\n\n```javascript\n  import React, { Component } from 'react';\n  import { toast, ToastContainer } from 'react-toastify';\n\n  const CloseButton = ({ YouCanPassAnyProps, closeToast }) => (\n    <i\n      className=\"material-icons\"\n      onClick={closeToast}\n    >\n    delete\n    </i>\n  );\n\n  class CustomClose extends Component {\n    notify = () => {\n      toast(\"The close button change when Chuck Norris display a toast\");\n    };\n\n    render(){\n      return (\n        <div>\n          <button onClick={this.notify}>Notify</button>;\n          <ToastContainer closeButton={<CloseButton YouCanPassAnyProps=\"foo\" />} />\n        </div>\n      );\n    }\n  }\n```\n\n#### Define it per toast\n\n```javascript\n  import React, { Component } from 'react';\n  import { toast } from 'react-toastify';\n\n  // Let's use the closeButton we defined on the previous example\n  class CustomClose extends Component {\n    notify = () => {\n      toast(\"The close button change when Chuck Norris display a toast\",{\n        closeButton: <CloseButton YouCanPassAnyProps=\"foo\" />\n      });\n    };\n\n    render(){\n      return <button onClick={this.notify}>Notify</button>;\n    }\n  }\n```\n\n#### Remove it\n\nSometimes you don't want to display a close button. It can be removed globally or per toast. Pass\n`false` to `closeButton` props:\n\n- remove it by default\n\n```js\n    <ToastContainer closeButton={false} />\n```\n\n- remove it per toast\n\n```js\n    toast(\"hello\", {\n      closeButton: false\n    })\n```\n\n-- if you removed it globally, you can display the default Button per toast (or you can set your custom button)\n\n```js\n    toast(\"hello\", {\n      closeButton: true // or <FontAwesomeCloseButton />\n    })\n```\n\n### Add an undo option to a toast like google drive\n\nSee it in action:\n\n[![Edit l2qkywz7xl](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/l2qkywz7xl)\n\n```javascript\nconst ToastUndo = ({ id, undo, closeToast }) => {\n  function handleClick(){\n    undo(id);\n    closeToast();\n  }\n\n  return (\n    <div>\n      <h3>\n        Row Deleted <button onClick={handleClick}>UNDO</button>\n      </h3>\n    </div>\n  );\n}\n\nclass App extends Component {\n  state = {\n    collection: data,\n    // Buffer\n    toRemove: []\n  };\n\n  // Remove the row id from the buffer\n  undo = id => {\n    this.setState({\n      toRemove: this.state.toRemove.filter(v => v !== id)\n    });\n  }\n\n  // Remove definetly\n  cleanCollection = () => this.setState({\n    // Return element which are not included in toRemove\n    collection: this.state.collection.filter(v => !this.state.toRemove.includes(v.id)),\n    //Cleanup the buffer\n    toRemove: []\n  });\n\n   // Remove row from render process\n   // then display the toast with undo action available\n  removeRow = e => {\n    const id = e.target.dataset.rowId;\n    this.setState({\n      toRemove: [...this.state.toRemove, id]\n    });\n    toast(<ToastUndo undo={this.undo} id={id} />, {\n      // hook will be called whent the component unmount\n      onClose: this.cleanCollection\n    });\n  };\n\n  renderRows() {\n    const { collection, toRemove } = this.state;\n\n    // Render all the element wich are not present in toRemove\n    // Im using data-attribute to grab the row id\n    return collection.filter(v => !toRemove.includes(v.id)).map(v => (\n      <tr key={v.id}>\n        <td>{v.firstName}</td>\n        <td>{v.lastName}</td>\n        <td>{v.email}</td>\n        <td>\n          <button onClick={this.removeRow} data-row-id={v.id}>\n            Delete\n          </button>\n        </td>\n      </tr>\n    ));\n  }\n\n  render() {\n    // Dont close the toast on click\n    return (\n      <div style={styles}>\n        <table>\n        <tbody>\n          <tr>\n            <th>name</th>\n            <th>firstname</th>\n            <th>gender</th>\n            <th />\n          </tr>\n          {this.renderRows()}\n          </tbody>\n        </table>\n        <ToastContainer closeOnClick={false} />\n      </div>\n    );\n  }\n}\n```\n\n### Replace the default transition\n\nThere is 4 built-in transitions provided:\n\n<details>\n  <summary>Bounce</summary>\n  <img src =\"https://user-images.githubusercontent.com/5574267/38770379-985f49c8-4012-11e8-9db1-5d4d1f26a3d5.gif\" />\n</details>\n\n<details>\n  <summary>Slide</summary>\n  <img src =\"https://user-images.githubusercontent.com/5574267/38770381-98a81d24-4012-11e8-8011-1190f3fb17c3.gif\" />\n</details>\n\n<details>\n  <summary>Zoom</summary>\n  <img src =\"https://user-images.githubusercontent.com/5574267/38770382-98c16342-4012-11e8-9abf-3cf3d3eabd8c.gif\" />\n</details>\n<details>\n  <summary>Flip</summary>\n  <img src =\"https://user-images.githubusercontent.com/5574267/38770380-9877dde4-4012-11e8-9485-0dc43346ce30.gif\" />\n</details>\n\nBounce is used by default but you can replace it by your own transition or by one of the list above:\n\n\n```js\nimport { Slide, Zoom, Flip, Bounce } from 'react-toastify';\n\n  <ToastContainer\n    transition={Slide}\n  />\n//...\n  <ToastContainer\n    transition={YourCustomTransition}\n  />\n\n```\nYou get the idea...\n\n### Define a custom enter and exit transition\n\nThe toast relies on `react-transition-group` for the enter and exit transition. Any transition built with react-transition-group should work !\n\n![toastify_custom_trans](https://user-images.githubusercontent.com/5574267/31049179-0d52e14c-a62e-11e7-9abd-b0d169a0fadc.gif)\n\n\nI'll use the zoom animation from animate.css. Of course, you could create your own animation.\n\n```css\n/* style.css*/\n@keyframes zoomIn {\n  from {\n    opacity: 0;\n    transform: scale3d(.3, .3, .3);\n  }\n\n  50% {\n    opacity: 1;\n  }\n}\n\n.zoomIn {\n  animation-name: zoomIn;\n}\n\n@keyframes zoomOut {\n  from {\n    opacity: 1;\n  }\n\n  50% {\n    opacity: 0;\n    transform: scale3d(.3, .3, .3);\n  }\n\n  to {\n    opacity: 0;\n  }\n}\n\n.zoomOut {\n  animation-name: zoomOut;\n}\n\n/* Not needed with the cssTransition helper */\n\n.animate {\n  animation-duration: 800ms;\n}\n```\n\n#### Ease your life with the cssTransition helper\n\nThe easiest way to roll your own transition is by using the `cssTransition` helper. Doing so you don't need to deal with `react-transition-group`. You only need to provide the `enter` and the `exit` class name, the transition `duration` is set\nto `750ms` by default but it can be overridden:\n\n```js\nimport React, { Component } from 'react';\nimport { toast, cssTransition } from 'react-toastify';\nimport './style.css';\n\nconst Zoom = cssTransition({\n  enter: 'zoomIn',\n  exit: 'zoomOut',\n  // default to 750ms, can be omitted\n  duration = 750,\n});\n\nclass App extends Component {\n  notify = () => {\n    toast(\"ZoomIn and ZoomOut\", {\n      transition: Zoom,\n      autoClose: 5000\n    });\n  };\n\n  render(){\n    return <button onClick={this.notify}>Notify</button>;\n  }\n}\n```\n\n##### Different duration for enter and exit\n\nIf you want the transition duration to be different between the enter and exit transition pass an array:\n\n```js\nimport React, { Component } from 'react';\nimport { toast, cssTransition } from 'react-toastify';\nimport './style.css';\n\nconst Zoom = cssTransition({\n  enter: 'zoomIn',\n  exit: 'zoomOut',\n  duration: [500, 800]\n});\n\nclass App extends Component {\n  notify = () => {\n    toast(\"ZoomIn and ZoomOut\", {\n      transition: Zoom,\n      autoClose: 5000\n    });\n  };\n\n  render(){\n    return <button onClick={this.notify}>Notify</button>;\n  }\n}\n```\n\n##### Handle transition based on the toast position\n\nSome transitions are based on the toast position. This is the case for the default one. If you pass `appendPosition` to the `cssTransition` helper as shown below, the current position will be appended to the `enter` and `exit` class name:\n\n```js\nimport React, { Component } from 'react';\nimport { toast, cssTransition } from 'react-toastify';\nimport './style.css';\n\nconst Zoom = cssTransition({\n  // zoomIn will become zoomIn--top-right or zoomIn--top-left and so on\n  enter: 'zoomIn',\n  // zoomIn will become zoomOut--top-right or zoomOut--top-left and so on\n  exit: 'zoomOut',\n  // default to false\n  appendPosition: true\n});\n\nclass App extends Component {\n  notify = () => {\n    toast(\"ZoomIn and ZoomOut\", {\n      transition: Zoom,\n      autoClose: 5000\n    });\n  };\n\n  render(){\n    return <button onClick={this.notify}>Notify</button>;\n  }\n}\n```\n\n#### Create a transition from scratch\n\n```js\nimport React, { Component } from 'react';\nimport { toast } from 'react-toastify';\nimport Transition from 'react-transition-group/Transition';\nimport './style.css';\n\nconst ZoomInAndOut = ({ children, position, ...props }) => (\n  <Transition\n    {...props}\n    {/* Same as the animation duration */}\n    timeout={800}\n    onEnter={ node => node.classList.add('zoomIn', 'animate')}\n    onExit={node => {\n      node.classList.remove('zoomIn', 'animate');\n      node.classList.add('zoomOut', 'animate');\n    }}\n  >\n    {children}\n  </Transition>\n);\n\nclass App extends Component {\n  notify = () => {\n    toast(\"ZoomIn and ZoomOut\", {\n      transition: ZoomInAndOut,\n      autoClose: 5000\n    });\n  };\n\n  render(){\n    return <button onClick={this.notify}>Notify</button>;\n  }\n}\n\n```\n\n### Swipe to remove\n\nYou can swipe the toast to remove it:\n\n![drag](https://user-images.githubusercontent.com/5574267/38770523-9438ff7c-4014-11e8-93a5-acd7dbdae52b.gif)\n\n#### Define the width percentage to remove the toast\n\nYou need to drag 80% of the toast width to remove it. This can be changed to fit your need:\n\n- Replace the default one:\n\n```js\n<ToastContainer draggablePercent={60}>\n```\n\n- Replace per toast:\n\n```js\ntoast('Hello', {\n  draggablePercent: 60\n});\n```\n\n#### Disable it\n\n- Disable by default for all toast:\n\n```js\n<ToastContainer draggable={false}>\n```\n\n- Disable per toast:\n\n```js\ntoast('Hello', {\n  draggable: false\n});\n```\n\n\n### Le style\n\n#### style with css classes\n\n```javascript\ntoast(\"Custom style\",{\n  className: 'black-background',\n  bodyClassName: \"grow-font-size\",\n  progressClassName: 'fancy-progress-bar'\n});\n```\n\n#### style with glamor\n\n```javascript\nimport { css } from 'glamor';\n\ntoast(\"Custom style\",{\n  className: css({\n    background: 'black'\n  }),\n  bodyClassName: css({\n    fontSize: '60px'\n  }),\n  progressClassName: css({\n    background: \"repeating-radial-gradient(circle at center, red 0, blue, green 30px)\"\n  })\n});\n```\n\n#### Define style globally\n\n```js\n<ToastContainer\n  className='toast-container'\n  toastClassName=\"dark-toast\"\n  progressClassName={css({\n    height: \"2px\"\n  })}\n/>\n```\n\n#### Right to left support\n\nYour app need to support rtl content? Set the rtl props to `true`:\n\n```javascript\n  render(){\n    return(\n      {/*Component*/}\n      <ToastContainer rtl />\n      {/*Component*/}\n    );\n  }\n```\n\n### Mobile\n\nOn mobile the toast will take all the available width.\n\n![react toastiy mobile](https://user-images.githubusercontent.com/5574267/28754040-ae7195ea-753d-11e7-86e1-f23c5e6bc531.gif)\n\n## Api\n\n### ToastContainer\n\n| Props                   | Type                   | Default   | Description                                                                                         |\n|-------------------------|------------------------|-----------|-----------------------------------------------------------------------------------------------------|\n| position                | string                 | top-right | One of top-right, top-center, top-left, bottom-right, bottom-center, bottom-left                    |\n| autoClose               | false or number        | 5000      | Delay in ms to close the toast. If set to false, the notification need to be closed manualy         |\n| closeButton             | React Element or false | -         | A React Component to replace the default close button or `false` to hide the button                 |\n| transition              | function               | -         | A reference to a valid react-transition-group/Transition component                                  |\n| hideProgressBar         | bool                   | false     | Display or not the progress bar below the toast(remaining time)                                     |\n| pauseOnHover            | bool                   | true      | Keep the timer running or not on hover                                                              |\n| pauseOnFocusLoss        | bool                   | true      | Pause the timer when the window loses focus                                                         |\n| rtl                     | bool                   | false     | Support right to left content                                                                       |\n| closeOnClick            | bool                   | true      | Dismiss toast on click                                                                              |\n| newestOnTop             | bool                   | false     | Display newest toast on top                                                                         |\n| className               | string\\|object         | -         | Add optional classes to the container                                                               |\n| style                   | object                 | -         | Add optional inline style to the container                                                          |\n| toastClassName          | string\\|object         | -         | Add optional classes to the toast                                                                   |\n| bodyClassName           | string\\|object         | -         | Add optional classes to the toast body                                                              |\n| progressClassName       | string\\|object         | -         | Add optional classes to the progress bar                                                            |\n| progressStyle           | object                 | -         | Add optional inline style to the progress bar                                                       |\n| draggable               | bool                   | true      | Allow toast to be draggable                                                                         |\n| draggablePercent        | number                 | 80        | The percentage of the toast's width it takes for a drag to dismiss a toast(value between 0 and 100) |\n| enableMultiContainer    | bool                   | -         | Enable multi toast container support                                                                |\n| containerId             | string\\number          | -         | Container id used to match toast with the same containerId                                     |\n\n\n\n### toast\n\nAll the method of toast return a **toastId** except `dismiss` and `isActive`.\nThe **toastId** can be used to remove a toast programmatically or to check if the toast is displayed.\n\n\n| Parameter | Type    | Required      | Description                                                   |\n| --------- | ------- | ------------- | ------------------------------------------------------------- |\n| content   | string or React Element | ✓                                                             | Element that will be displayed |\n| options   | object  | ✘             | Options listed below |  |\n\n- Available options :\n    - `type`: Kind of notification. One of \"default\", \"success\", \"info\", \"warning\", \"error\". You can use `toast.TYPE.SUCCESS` and so on to avoid any typo.\n    - `onOpen`: Called inside componentDidMount\n    - `onClose`: Called inside componentWillUnmount\n    - `autoClose`: same as ToastContainer.\n    - `closeButton`: `false` to disable, a `React Component` to replace or `true` to display the default button.\n    - `transition`: same as ToastContainer.\n    - `closeOnClick`: same as ToastContainer.\n    - `hideProgressBar`: same as ToastContainer.\n    - `position`: same as ToastContainer\n    - `pauseOnHover`: same as ToastContainer\n    - `pauseOnFocusLoss`: same as ToastContainer\n    - `className`: same as ToastContainer toastClassName\n    - `bodyClassName`: same as ToastContainer\n    - `progressClassName`: same as ToastContainer\n    - `draggable`: same as ToastContainer\n    - `draggablePercent`: same as ToastContainer\n    - `toastId`: optional integer or string to manually set a toastId. If an invalid type is provided a generated toastId will be used\n    - `progress`: a value between 0..1 to control the progress bar \n    - `render`: string or React Element, only available when calling update\n    - `delay`: a number to let you delay the toast appearance\n    - `containerId`:  string or number to match a specific Toast container\n\n:warning:️ *Toast options supersede ToastContainer props* :warning:\n\n:warning:️ *Manually setting a toastId overwrite automatically generated toastIds* :warning:\n\n```js\nconst Img = ({ src }) => <div><img width={48} src={src} /></div>;\nconst options = {\n    onOpen: props => console.log(props.foo),\n    onClose: props => console.log(props.foo),\n    autoClose: 6000,\n    closeButton: <FontAwesomeCloseButton />,\n    type: toast.TYPE.INFO,\n    hideProgressBar: false,\n    position: toast.POSITION.TOP_LEFT,\n    pauseOnHover: true,\n    transition: MyCustomTransition,\n    progress: 0.2\n    // and so on ...\n};\n\nconst toastId = toast(<Img foo={bar}/>, options) // default, type: 'default'\ntoast(({ closeToast }) => <div>Render props like</div>, options);\ntoast.success(\"Hello\", options) // add type: 'success' to options\ntoast.info(\"World\", options) // add type: 'info' to options\ntoast.warn(<Img />, options) // add type: 'warning' to options\ntoast.error(<Img />, options) // add type: 'error' to options\ntoast.dismiss() // Remove all toasts !\ntoast.dismiss(toastId) // Remove given toast\ntoast.isActive(toastId) //Check if a toast is displayed or not\ntoast.update(toastId, {\n  type: toast.TYPE.INFO,\n  render: <Img foo={bar}/>\n});\ntoast.done(toastId) // completes the controlled progress bar\ntoast.configure({\n  autoClose: 8000,\n  draggable: false,\n  //same as ToastContainer props\n})\ntoast.useLazyContainer(false) // disable lazy container\n```\n\n### cssTransition\n\n| Parameter      | Type   | Required | Default | Description                                                                                                |\n|----------------|--------|----------|---------|------------------------------------------------------------------------------------------------------------|\n| enter          | string | ✓        | -       | The class name that will be used when the toast enter                                                      |\n| exit           | string | ✓        | -       | The class name that will be used when the toast exit                                                       |\n| duration       | number\\| Array<number> | ✘        | 750     | The transition duration in ms.                                                                             |\n| appendPosition | bool   | ✘        | false   | Append or not the position  to the class name: `yourClassName--top-right`, `yourClassName--bottom-left`... |\n\n```js\nimport { cssTransition } from 'react-toastify';\n\nconst Zoom = cssTransition({\n  enter: 'zoomIn',\n  exit: 'zoomOut',\n  duration: 750,\n  appendPosition: false\n});\n\nconst Zoom = cssTransition({\n  enter: 'zoomIn',\n  exit: 'zoomOut',\n  duration: [500, 600],\n  appendPosition: false\n});\n```\n\n## Browser Support\n\n![IE](https://cloud.githubusercontent.com/assets/398893/3528325/20373e76-078e-11e4-8e3a-1cb86cf506f0.png) | ![Chrome](https://cloud.githubusercontent.com/assets/398893/3528328/23bc7bc4-078e-11e4-8752-ba2809bf5cce.png) | ![Firefox](https://cloud.githubusercontent.com/assets/398893/3528329/26283ab0-078e-11e4-84d4-db2cf1009953.png) | ![Opera](https://cloud.githubusercontent.com/assets/398893/3528330/27ec9fa8-078e-11e4-95cb-709fd11dac16.png) | ![Safari](https://cloud.githubusercontent.com/assets/398893/3528331/29df8618-078e-11e4-8e3e-ed8ac738693f.png) | ![Edge](https://raw.githubusercontent.com/alrra/browser-logos/master/src/edge/edge_48x48.png)\n--- | --- | --- | --- | --- | --- |\nIE 11+ ✔ | Latest ✔ | Latest ✔ | Latest ✔ | Latest ✔ | Latest ✔ |\n\n## Release Notes\n\nYou can find the release note for the latest release [here](https://github.com/fkhadra/react-toastify/releases/latest)\n\n\nYou can browse them all [here](https://github.com/fkhadra/react-toastify/releases)\n\n## Contribute\n\nShow your ❤️ and support by giving a ⭐. Any suggestions are welcome ! Take a look at the contributing guide.\n\nYou can also find me on [reactiflux](https://www.reactiflux.com/). My pseudo is Fadi.\n\n## License\n\nLicensed under MIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fkhadra/react-toastify.git"
  },
  "scripts": {
    "build": "npm run clean && cross-env NODE_ENV=production rollup -c && npm run style",
    "clean": "rimraf cjs/* && rimraf dist/* && rimraf esm/*",
    "lint": "eslint src/",
    "lint:fix": "eslint --fix src/",
    "postsass": "postcss dist/ReactToastify.css --use autoprefixer -m -o dist/ReactToastify.css",
    "prebuild": "npm run test",
    "prettier-all": "prettier --single-quote --write 'src/**/*.js'",
    "sass": "node-sass scss/main.scss dist/ReactToastify.css",
    "start": "npm run sass && webpack-dev-server --config ./webpack.config.dev.js",
    "style": "npm run sass && cssnano dist/ReactToastify.css dist/ReactToastify.min.css --no-zindex --no-reduceIdents",
    "test": "jest",
    "test:coverage": "jest --coverage && cat ./coverage/lcov.info | coveralls"
  },
  "sideEffects": [
    "*.css"
  ],
  "typings": "index.d.ts",
  "version": "5.1.0"
}
