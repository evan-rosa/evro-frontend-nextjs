{
  "_args": [
    [
      {
        "raw": "tar-stream@^2.1.0",
        "scope": null,
        "escapedName": "tar-stream",
        "name": "tar-stream",
        "rawSpec": "^2.1.0",
        "spec": ">=2.1.0 <3.0.0",
        "type": "range"
      },
      "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend/node_modules/archiver"
    ]
  ],
  "_from": "tar-stream@^2.1.0",
  "_hasShrinkwrap": false,
  "_id": "tar-stream@2.1.0",
  "_location": "/tar-stream",
  "_nodeVersion": "10.15.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/tar-stream_2.1.0_1559676021154_0.27249664943694163"
  },
  "_npmUser": {
    "name": "mafintosh",
    "email": "mathiasbuus@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {
    "inherits": "2.0.3",
    "string_decoder": "1.1.1",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "raw": "tar-stream@^2.1.0",
    "scope": null,
    "escapedName": "tar-stream",
    "name": "tar-stream",
    "rawSpec": "^2.1.0",
    "spec": ">=2.1.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/archiver"
  ],
  "_resolved": "https://registry.npmjs.org/tar-stream/-/tar-stream-2.1.0.tgz",
  "_shasum": "d1aaa3661f05b38b5acc9b7020efdca5179a2cc3",
  "_shrinkwrap": null,
  "_spec": "tar-stream@^2.1.0",
  "_where": "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend/node_modules/archiver",
  "author": {
    "name": "Mathias Buus",
    "email": "mathiasbuus@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/mafintosh/tar-stream/issues"
  },
  "dependencies": {
    "bl": "^3.0.0",
    "end-of-stream": "^1.4.1",
    "fs-constants": "^1.0.0",
    "inherits": "^2.0.3",
    "readable-stream": "^3.1.1"
  },
  "description": "tar-stream is a streaming tar parser and generator and nothing else. It is streams2 and operates purely using streams which means you can easily extract/parse tarballs without ever hitting the file system.",
  "devDependencies": {
    "concat-stream": "^2.0.0",
    "standard": "^12.0.1",
    "tape": "^4.9.2"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-+DAn4Nb4+gz6WZigRzKEZl1QuJVOLtAwwF+WUxy1fJ6X63CaGaUAxJRD2KEn1OMfcbCjySTYpNC6WmfQoIEOdw==",
    "shasum": "d1aaa3661f05b38b5acc9b7020efdca5179a2cc3",
    "tarball": "https://registry.npmjs.org/tar-stream/-/tar-stream-2.1.0.tgz",
    "fileCount": 7,
    "unpackedSize": 27320,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc9sR2CRA9TVsSAnZWagAAgsgP/ii3l92+LRzyiQxrBeTX\n92A65nTNrZpbAEZL5qB24fFCUy8Fps4PQq/NyYujLc0BvHG+xZ+EHBnP2vrm\nwn/I/xQHsuCCcp9Lxr6UZovbxNozkSA9TKeYuQxPuvXxf0l1rGF1i8q0jqet\nUHRg9T5Qv3KNmrs2HOm2iQKO3k4tqzLJh/YDtD3+ma61G5eCUnBCF4opxAHd\n0dqihSRz7jsTRTKSFWNDHdHEcGV/OvFTvw1oE9l4oLJBCUnVHvQcai5xgdk6\nFmeTqWdwe9cwZ2pbb1pf3QlzsOEUC9doVosnsU0OiZ7qW+UOEdOtOELYjzsi\nBAS4hAC8IV1XwV+IeGBbpczRjFYBrBLukRESotkn74UkNT+miKghhQ3yT73y\nLI080JNFiXuqfRP5pz1Ihu0Pfv4aRFjBWo2UlbuUuX+UBQto4NJG2eU4swAH\nnGhZPMfweOlvKX2LCFGibDNdJBzzBDHr2Y3gIrH/57jFoCzNlMouDiwhhq64\nARc3314/s8jhTONi36sb9yUqW9OSEY1V5BNeSx8lHJhfWSCvbp2/yVaExrcJ\nd4lB0yneYoyUggflYkvpCgfCfQjNce54cS2vLRxcLADkh69nWsM6HB/Q78JZ\nLiiLiXzlu6vdI22+hebLZgGCO2lvxeQJYdhuFsn8U8mLfkuhw0DM/Y6sQNoj\nx0uS\r\n=evjK\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "*.js",
    "LICENSE"
  ],
  "gitHead": "9f10b5fc261cb600bd3c8e3c8d66ff7837e594a2",
  "homepage": "https://github.com/mafintosh/tar-stream",
  "keywords": [
    "tar",
    "tarball",
    "parse",
    "parser",
    "generate",
    "generator",
    "stream",
    "stream2",
    "streams",
    "streams2",
    "streaming",
    "pack",
    "extract",
    "modify"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mafintosh",
      "email": "mathiasbuus@gmail.com"
    },
    {
      "name": "maxogden",
      "email": "max@maxogden.com"
    }
  ],
  "name": "tar-stream",
  "optionalDependencies": {},
  "readme": "# tar-stream\n\ntar-stream is a streaming tar parser and generator and nothing else. It is streams2 and operates purely using streams which means you can easily extract/parse tarballs without ever hitting the file system.\n\nNote that you still need to gunzip your data if you have a `.tar.gz`. We recommend using [gunzip-maybe](https://github.com/mafintosh/gunzip-maybe) in conjunction with this.\n\n```\nnpm install tar-stream\n```\n\n[![build status](https://secure.travis-ci.org/mafintosh/tar-stream.png)](http://travis-ci.org/mafintosh/tar-stream)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](http://opensource.org/licenses/MIT)\n\n## Usage\n\ntar-stream exposes two streams, [pack](https://github.com/mafintosh/tar-stream#packing) which creates tarballs and [extract](https://github.com/mafintosh/tar-stream#extracting) which extracts tarballs. To [modify an existing tarball](https://github.com/mafintosh/tar-stream#modifying-existing-tarballs) use both.\n\n\nIt implementes USTAR with additional support for pax extended headers. It should be compatible with all popular tar distributions out there (gnutar, bsdtar etc)\n\n## Related\n\nIf you want to pack/unpack directories on the file system check out [tar-fs](https://github.com/mafintosh/tar-fs) which provides file system bindings to this module.\n\n## Packing\n\nTo create a pack stream use `tar.pack()` and call `pack.entry(header, [callback])` to add tar entries.\n\n``` js\nvar tar = require('tar-stream')\nvar pack = tar.pack() // pack is a streams2 stream\n\n// add a file called my-test.txt with the content \"Hello World!\"\npack.entry({ name: 'my-test.txt' }, 'Hello World!')\n\n// add a file called my-stream-test.txt from a stream\nvar entry = pack.entry({ name: 'my-stream-test.txt', size: 11 }, function(err) {\n  // the stream was added\n  // no more entries\n  pack.finalize()\n})\n\nentry.write('hello')\nentry.write(' ')\nentry.write('world')\nentry.end()\n\n// pipe the pack stream somewhere\npack.pipe(process.stdout)\n```\n\n## Extracting\n\nTo extract a stream use `tar.extract()` and listen for `extract.on('entry', (header, stream, next) )`\n\n``` js\nvar extract = tar.extract()\n\nextract.on('entry', function(header, stream, next) {\n  // header is the tar header\n  // stream is the content body (might be an empty stream)\n  // call next when you are done with this entry\n\n  stream.on('end', function() {\n    next() // ready for next entry\n  })\n\n  stream.resume() // just auto drain the stream\n})\n\nextract.on('finish', function() {\n  // all entries read\n})\n\npack.pipe(extract)\n```\n\nThe tar archive is streamed sequentially, meaning you **must** drain each entry's stream as you get them or else the main extract stream will receive backpressure and stop reading.\n\n## Headers\n\nThe header object using in `entry` should contain the following properties.\nMost of these values can be found by stat'ing a file.\n\n``` js\n{\n  name: 'path/to/this/entry.txt',\n  size: 1314,        // entry size. defaults to 0\n  mode: 0644,        // entry mode. defaults to to 0755 for dirs and 0644 otherwise\n  mtime: new Date(), // last modified date for entry. defaults to now.\n  type: 'file',      // type of entry. defaults to file. can be:\n                     // file | link | symlink | directory | block-device\n                     // character-device | fifo | contiguous-file\n  linkname: 'path',  // linked file name\n  uid: 0,            // uid of entry owner. defaults to 0\n  gid: 0,            // gid of entry owner. defaults to 0\n  uname: 'maf',      // uname of entry owner. defaults to null\n  gname: 'staff',    // gname of entry owner. defaults to null\n  devmajor: 0,       // device major version. defaults to 0\n  devminor: 0        // device minor version. defaults to 0\n}\n```\n\n## Modifying existing tarballs\n\nUsing tar-stream it is easy to rewrite paths / change modes etc in an existing tarball.\n\n``` js\nvar extract = tar.extract()\nvar pack = tar.pack()\nvar path = require('path')\n\nextract.on('entry', function(header, stream, callback) {\n  // let's prefix all names with 'tmp'\n  header.name = path.join('tmp', header.name)\n  // write the new entry to the pack stream\n  stream.pipe(pack.entry(header, callback))\n})\n\nextract.on('finish', function() {\n  // all entries done - lets finalize it\n  pack.finalize()\n})\n\n// pipe the old tarball to the extractor\noldTarballStream.pipe(extract)\n\n// pipe the new tarball the another stream\npack.pipe(newTarballStream)\n```\n\n## Saving tarball to fs\n\n\n``` js\nvar fs = require('fs')\nvar tar = require('tar-stream')\n\nvar pack = tar.pack() // pack is a streams2 stream\nvar path = 'YourTarBall.tar'\nvar yourTarball = fs.createWriteStream(path)\n\n// add a file called YourFile.txt with the content \"Hello World!\"\npack.entry({name: 'YourFile.txt'}, 'Hello World!', function (err) {\n  if (err) throw err\n  pack.finalize()\n})\n\n// pipe the pack stream to your file\npack.pipe(yourTarball)\n\nyourTarball.on('close', function () {\n  console.log(path + ' has been written')\n  fs.stat(path, function(err, stats) {\n    if (err) throw err\n    console.log(stats)\n    console.log('Got file info successfully!')\n  })\n})\n```\n\n## Performance\n\n[See tar-fs for a performance comparison with node-tar](https://github.com/mafintosh/tar-fs/blob/master/README.md#performance)\n\n# License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mafintosh/tar-stream.git"
  },
  "scripts": {
    "test": "standard && tape test/extract.js test/pack.js",
    "test-all": "standard && tape test/*.js"
  },
  "version": "2.1.0"
}
