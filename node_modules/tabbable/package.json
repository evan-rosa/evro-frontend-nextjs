{
  "_args": [
    [
      {
        "raw": "tabbable@^3.1.2",
        "scope": null,
        "escapedName": "tabbable",
        "name": "tabbable",
        "rawSpec": "^3.1.2",
        "spec": ">=3.1.2 <4.0.0",
        "type": "range"
      },
      "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend/node_modules/focus-trap"
    ]
  ],
  "_from": "tabbable@^3.1.2",
  "_hasShrinkwrap": false,
  "_id": "tabbable@3.1.2",
  "_location": "/tabbable",
  "_nodeVersion": "8.14.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/tabbable_3.1.2_1546444231281_0.009015008935465474"
  },
  "_npmUser": {
    "name": "davidtheclark",
    "email": "david.dave.clark@gmail.com"
  },
  "_npmVersion": "6.5.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "tabbable@^3.1.2",
    "scope": null,
    "escapedName": "tabbable",
    "name": "tabbable",
    "rawSpec": "^3.1.2",
    "spec": ">=3.1.2 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/focus-trap"
  ],
  "_resolved": "https://registry.npmjs.org/tabbable/-/tabbable-3.1.2.tgz",
  "_shasum": "f2d16cccd01f400e38635c7181adfe0ad965a4a2",
  "_shrinkwrap": null,
  "_spec": "tabbable@^3.1.2",
  "_where": "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend/node_modules/focus-trap",
  "author": {
    "name": "David Clark"
  },
  "bugs": {
    "url": "https://github.com/davidtheclark/tabbable/issues"
  },
  "dependencies": {},
  "description": "Returns an array of all tabbable DOM nodes within a containing node.",
  "devDependencies": {
    "brfs": "^1.4.3",
    "browserify": "^13.1.1",
    "budo": "^9.2.1",
    "chai": "^3.5.0",
    "eslint": "^3.9.0",
    "karma": "^1.3.0",
    "karma-browserify": "^5.1.0",
    "karma-firefox-launcher": "^1.0.0",
    "karma-mocha": "^1.3.0",
    "karma-mocha-reporter": "^2.2.1",
    "mocha": "^3.2.0",
    "watchify": "^3.8.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-wjB6puVXTYO0BSFtCmWQubA/KIn7Xvajw0x0l6eJUudMG/EAiJvIUnyNX6xO4NpGrJ16lbD0eUseB9WxW0vlpQ==",
    "shasum": "f2d16cccd01f400e38635c7181adfe0ad965a4a2",
    "tarball": "https://registry.npmjs.org/tabbable/-/tabbable-3.1.2.tgz",
    "fileCount": 6,
    "unpackedSize": 15802,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcLN3HCRA9TVsSAnZWagAAZKUP/0w6KFWc7WO/tf02+MfS\nkFfjcr2vetkqmzOvnhY2g672B0XfpbW/4WE7qb/ezheINsoJ9Y6ROxaJc4F0\n70E/qXJFWYtimMmVNX6ax360xpON0195MHg6dzOyUt0IfMrmRJcfXKUdipNQ\nH+4OB7GchrsOAP7v5wBib6pARtQR2twYsxOFNtvZXcYINrF36B5y8I3gPlRI\nkKp8NeH0qoz6B+LAklagf9mpVwcSF/74hW3lhF/NaY0KaabAyHHLBe+SDgfi\n+Ijb69ESMjvVvstWqxDpZhLMVviD7qcN5JDcXY7o0kJnEfOaQyNlEAJ6xijt\nTm7JGUasRkK3QwIjWwgJOUhc8cpphBEIEWmOXDlhSGrdf/Zot5+xmvpPQPt/\nJL4i+BvWjItUBxx8BWjF2x8+LNjwYFfY61wpWBkH+DdnSjGJBNlijTU/cQ1L\nQkSaOLgtx4vHfyKH7IkXHciVXk1CUCtC6ldC70TYynUFanG2oIYArVX9AEkI\nKoCJ+3Em0wevHJB1S2qb8zJqCIBbKYuvqkG/tfUho8xj87rWIVVo0mmsnr5+\n+iInOEYEax9w3egz6B6vFRK49E16nMqFmFNL6UOqG9QMSoNwr4kbsdCSOXC6\nSM91dshtWl1SrZ3JkplG9r42alAnCInv2bPoCu/ycawZkPYreJS6foZlHdBI\nKIdq\r\n=tA9s\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "c5ad06c85e596fea038c8a59a97324627eaa2784",
  "homepage": "https://github.com/davidtheclark/tabbable#readme",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "davidtheclark",
      "email": "david.dave.clark@gmail.com"
    }
  ],
  "name": "tabbable",
  "optionalDependencies": {},
  "readme": "# tabbable\n\n[![Build Status](https://travis-ci.org/davidtheclark/tabbable.svg?branch=master)](https://travis-ci.org/davidtheclark/tabbable)\n\nReturns an array of all\\* tabbable DOM nodes within a containing node. (\\* \"all\" has some necessary caveats, which you'll learn about by reading below.)\n\nThe following are considered tabbable:\n\n- `<button>`s\n- `<input>`s\n- `<select>`s\n- `<textarea>`s\n- `<a>`s with `href` or `xlink:href` attributes\n- `<audio>`s and `<videos>`s with `controls` attributes\n- `[contenteditable]` elements\n- anything with a non-negative `tabindex`\n\nAny of the above will *not* be considered tabbable, though, if any of the following are also true about it:\n\n- negative `tabindex`\n- `disabled`\n- either the node itself *or an ancestor of it* is hidden via `display: none` or `visibility: hidden`\n- it's an `<input type=\"radio\">` and a different radio in its group is `checked`\n\n**If you think a node should be included in your array of tabbables *but it's not*, all you need to do is add `tabindex=\"0\"` to deliberately include it.** (Or if it is in your array but you don't want it, you can add `tabindex=\"-1\"` to deliberately exclude it.) This will also result in more consistent cross-browser behavior. For information about why your special node might *not* be included, see [\"More details\"](#more-details), below.\n\n## Goals\n\n- Accurate (or, as accurate as possible & reasonable)\n- No dependencies\n- Small\n- Fast\n\n## Browser Support\n\nBasically IE9+.\n\nWhy? It uses [Element.querySelectorAll()](https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll) and [Window.getComputedStyle()](https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle).\n\n## Installation\n\n```\nnpm install tabbable\n```\n\nDependencies: *none*.\n\nYou'll need to be compiling CommonJS (via browserify or webpack).\n\n## API\n\n### tabbable\n\n```\ntabbable(rootNode, [options])\n```\n\nReturns an array of ordered tabbable node within the `rootNode`.\n\nSummary of ordering principles:\n- First include any nodes with positive `tabindex` attributes (1 or higher), ordered by ascending `tabindex` and source order.\n- Then include any nodes with a zero `tabindex` and any element that by default receives focus (listed above) and does not have a positive `tabindex` set, in source order.\n\n#### rootNode\n\nType: `Node`. **Required.**\n\n#### options\n\n##### includeContainer\n\nType: `boolean`. Default: `false`.\n\nIf set to `true`, `rootNode` will be included in the returned tabbable node array, if `rootNode` is tabbable.\n\n### tabbable.isTabbable\n\n```\ntabbable.isTabbable(node)\n```\n\nReturns a boolean indicating whether the provided node is considered tabbable.\n\n### tabbable.isFocusable\n\n```\ntabbable.isFocusable(node)\n```\n\nReturns a boolean indicating whether the provided node is considered *focusable*.\n\nAll tabbable elements are focusable, but not all focusable elements are tabbable. For example, elements with `tabindex=\"-1\"` are focusable but not tabbable.\n\n## More details\n\n- **Tabbable tries to identify elements that are reliably tabbable across (not dead) browsers.** Browsers are stupidly inconsistent in their behavior, though — especially for edge-case elements like `<object>` and `<iframe>` — so this means *some* elements that you *can* tab to in *some* browsers will be left out of the results. (To learn more about that stupid inconsistency, see this [amazing table](https://allyjs.io/data-tables/focusable.html)). To provide better consistency across browsers and ensure the elements you *want* in your tabbables list show up there, **try adding `tabindex=\"0\"` to edge-case elements that Tabbable ignores**.\n- (Exemplifying the above ^^:) **The tabbability of `<iframe>`s, `<embed>`s, `<object>`s, and `<svg>`s is [inconsistent across browsers](https://allyjs.io/data-tables/focusable.html)**, so if you need an accurate read on one of these elements you should try giving it a `tabindex`. (You'll also need to pay attention to the `focusable` attribute on SVGs in IE & Edge.) But you also might *not* be able to get an accurate read — so you should avoid relying on it.\n- **Radio groups have some edge cases, which you can avoid by always having a `checked` one in each group** (and that is what you should usually do anyway). If there is no `checked` radio in the radio group, *all* of the radios will be considered tabbable. (Some browsers do this, otherwise don't — there's not consistency.)\n- If you're thinking, \"Why not just use the right `querySelectorAll`?\", you *may* be on to something ... but, as with most \"just\" statements, you're probably not. For example, a simple `querySelectorAll` approach will not figure out whether an element is *hidden*, and therefore not actually tabbable. (That said, if you do think Tabbable can be simplified or otherwise improved, I'd love to hear your idea.)\n- jQuery UI's `:tabbable` selector ignores elements with height and width of `0`. I'm not sure why — because I've found that I can still tab to those elements. So I kept them in. Only elements hidden with `display: none` or `visibility: hidden` are left out.\n- Although Tabbable tries to deal with positive tabindexes, **you should not use positive tabindexes**. Accessibility experts seem to be in (rare) unanimous and clear consent about this: rely on the order of elements in the document.\n- Safari on Mac OS X does not Tab to `<a>` elements by default: you have to change a setting to get the standard behavior. Tabbable does not know whether you've changed that setting or not, so it will include `<a>` elements in its list.\n\n***Feedback and contributions more than welcome!***\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/davidtheclark/tabbable.git"
  },
  "scripts": {
    "lint": "eslint .",
    "start": "budo -l -d -o test/debug.js -- -t brfs",
    "test": "karma start && npm run lint"
  },
  "version": "3.1.2"
}
