{
  "_args": [
    [
      {
        "raw": "next-compose-plugins@^2.2.0",
        "scope": null,
        "escapedName": "next-compose-plugins",
        "name": "next-compose-plugins",
        "rawSpec": "^2.2.0",
        "spec": ">=2.2.0 <3.0.0",
        "type": "range"
      },
      "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend"
    ]
  ],
  "_from": "next-compose-plugins@^2.2.0",
  "_hasShrinkwrap": false,
  "_id": "next-compose-plugins@2.2.0",
  "_location": "/next-compose-plugins",
  "_nodeVersion": "10.15.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/next-compose-plugins_2.2.0_1556387773084_0.9630654651273716"
  },
  "_npmUser": {
    "name": "cyrilwanner",
    "email": "info@cyr.li"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "next-compose-plugins@^2.2.0",
    "scope": null,
    "escapedName": "next-compose-plugins",
    "name": "next-compose-plugins",
    "rawSpec": "^2.2.0",
    "spec": ">=2.2.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/next-compose-plugins/-/next-compose-plugins-2.2.0.tgz",
  "_shasum": "95cd8eb40ab0652070d76572fb648354191628b0",
  "_shrinkwrap": null,
  "_spec": "next-compose-plugins@^2.2.0",
  "_where": "/Users/Evro/Documents/Career/evro-io/evro-web-live/nextjs/evro-heroku-stage/frontend",
  "author": {
    "name": "Cyril Wanner",
    "email": "info@cyr.li"
  },
  "bugs": {
    "url": "https://github.com/cyrilwanner/next-compose-plugins/issues"
  },
  "dependencies": {},
  "description": "Provides a cleaner API for enabling and configuring plugins for next.js",
  "devDependencies": {
    "@babel/cli": "^7.4.4",
    "@babel/core": "^7.4.4",
    "@babel/plugin-proposal-object-rest-spread": "^7.4.4",
    "@babel/preset-env": "^7.4.4",
    "babel-core": "^6.26.3",
    "eslint": "^5.16.0",
    "eslint-config-airbnb-base": "^13.1.0",
    "eslint-plugin-import": "^2.17.2",
    "eslint-plugin-jest": "^22.5.1",
    "jest": "^24.7.1",
    "npm-autoinstaller": "^1.3.1",
    "rimraf": "^2.6.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-ChUlpT9tWfJ7YxqGw/WQ2T1gf8EeX93n1XqeQw0lkvGa7seszahvF4eOZUJoq7Hetsbzg4UHVnPoCXfXTyQR3g==",
    "shasum": "95cd8eb40ab0652070d76572fb648354191628b0",
    "tarball": "https://registry.npmjs.org/next-compose-plugins/-/next-compose-plugins-2.2.0.tgz",
    "fileCount": 7,
    "unpackedSize": 24471,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcxJe9CRA9TVsSAnZWagAAkacQAKPHkriAORwHQOK43ktv\nqd2XDaHmtstYs7w8po9ZeZQLjJzWNOSf2DuLA+Hv0lhQ1bdZUWxST/aa8Ja4\nVA9181ZltNeJnrj8zyypcT4MwinbJyPg+dVUnzbGccgxmv4gAU0syi8XFEY0\n2pSOMCv+B3Z75n8KVxAYor9uyFb5oivNl/GrXKyTZxuamEJ7/u8m7HZgYoJI\ncpqE53ukB8FahqopcTgEiY/XUVCr+jqfYuPPXFOjjLszD3PhLOITaxFz5T+n\nLzwNZzl/sM7qfpuTr8HzKZ7Netngsh+EXcuuOXqYWYpeTVo8/G4muLtVcu9N\nuppSuM8J+ghLHdjrC+EPl86cmnGr6IzvgHS9NSSXfbKTLzQdUW9WA40LgHVs\nTjXU3VFM7udWa9c2A00MoSRkeHiFGu8OHJF9W+p1v4n/1P3Px+ZDMkJWrPqP\n7dfEtcV9uzwcNbeaafZOfvGBT4cv05WpEASq0gPrzmzkPkHqWLo59iekfVPw\n5QkOqoCEj2vzmhF9I+wUziSCeurT2N8SGjNUj7ijTtALWO9YQcYp5IDoky04\nCQwfCTUu3e9+LJ9t9iomblH0Dz/0YoT5mJp/lsHdLnu8UlWBLgVgESM4UDr8\n8J1NYK63NRCFpfSUMR82sHro8uZAoHS/+i2yJ0Ez8hTb6f5c8vvNGqX3tX/Z\n1LV/\r\n=oKyR\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "lib"
  ],
  "gitHead": "f80d939562f5c3149246746c7e5e4b2ca2d3f55f",
  "homepage": "https://github.com/cyrilwanner/next-compose-plugins#readme",
  "keywords": [
    "next.js",
    "next",
    "react",
    "plugins",
    "compose"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "cyrilwanner",
      "email": "info@cyr.li"
    }
  ],
  "name": "next-compose-plugins",
  "optionalDependencies": {},
  "readme": "# :bulb: next-compose-plugins [![npm version](https://badgen.net/npm/v/next-compose-plugins)](https://www.npmjs.com/package/next-compose-plugins) [![license](https://badgen.net/github/license/cyrilwanner/next-compose-plugins)](https://github.com/cyrilwanner/next-compose-plugins/blob/master/LICENSE) [![downloads](https://badgen.net/npm/dt/next-compose-plugins)](https://www.npmjs.com/package/next-compose-plugins)\n\nProvides a cleaner API for enabling and configuring plugins for [next.js](https://github.com/zeit/next.js) because the default way next.js suggests to enable and configure plugins can get unclear and confusing when you have many plugins.\n\nIt is often unclear which plugins are enabled or which configuration belongs to which plugin because they are nested and share one configuration object.\nThis can also lead to orphaned configuration values when updating or removing plugins.\n\nWhile `next-compose-plugins` tries to eliminate this case by providing an alternative API for enabling and configuring plugins where each plugin has their own configuration object, it also adds more features like phase specific plugins and configuration.\n\n## Table of contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n  - [`withPlugins`](#usage)\n  - [Optional plugins](#optional-plugins)\n  - [Extend another config file](#extend-another-config-file)\n- [Plugin developers](#plugin-developers)\n- [Examples](#examples)\n- [See also](#see-also)\n- [License](#license)\n\n## Installation\n\n```\nnpm install --save next-compose-plugins\n```\n\nThis plugin requires next.js `>= 5.1` because it depends on the phases introduced within this version.\nIf you are still on `5.0.x`, you can install v1 of this plugin: `npm install --save next-compose-plugins@1`.\n\n## Usage\n```javascript\n// next.config.js\nconst withPlugins = require('next-compose-plugins');\n\nmodule.exports = withPlugins([...plugins], nextConfiguration);\n```\n\n### `plugins`\n\n> See the [examples](#examples) for more use-cases.\n\nIt is an array containing all plugins and their configuration.\nIf a plugin does not need additional configuration, you can simply add the imported plugin.\nIf it does need configuration or you only want to run it in a specific phase, you can specify an array:\n\n#### `[plugin: function, configuration?: object, phases?: array]`\n\n##### `plugin: function`\n\nImported plugin.\nSee the [optional plugins](#optional-plugins) section if you only want to require a plugin when it is really used.\n\n```javascript\nconst withPlugins = require('next-compose-plugins');\nconst sass = require('@zeit/next-sass');\n\nmodule.exports = withPlugins([\n  [sass],\n]);\n```\n\n##### `configuration?: object`\n\nConfiguration for the plugin.\n\nYou can also overwrite specific configuration keys for a phase:\n\n```javascript\nconst withPlugins = require('next-compose-plugins');\nconst { PHASE_PRODUCTION_BUILD } = require('next-server/constants');\nconst sass = require('@zeit/next-sass');\n\nmodule.exports = withPlugins([\n  [sass, {\n    cssModules: true,\n    cssLoaderOptions: {\n      localIdentName: '[path]___[local]___[hash:base64:5]',\n    },\n    [PHASE_PRODUCTION_BUILD]: {\n      cssLoaderOptions: {\n        localIdentName: '[hash:base64:8]',\n      },\n    },\n  }],\n]);\n```\n\nThis will overwrite the `cssLoaderOptions` with the new `localIdentName` specified, but **only** during production build.\nYou can also combine multiple phases (`[PHASE_PRODUCTION_BUILD + PHASE_PRODUCTION_SERVER]: {}`) or exclude a phase (`['!' + PHASE_PRODUCTION_BUILD]: {}` which will overwrite the config in all phases except `PRODUCTION_BUILD`).\nYou can use all phases [next.js provides](https://github.com/zeit/next.js/blob/canary/packages/next-server/lib/constants.ts).\n\n##### `phases?: array`\n\nIf the plugin should only be applied in specific phases, you can specify them here.\nYou can use all phases [next.js provides](https://github.com/zeit/next.js/blob/canary/packages/next-server/lib/constants.ts).\n\n```javascript\nconst withPlugins = require('next-compose-plugins');\nconst { PHASE_DEVELOPMENT_SERVER, PHASE_PRODUCTION_BUILD } = require('next-server/constants');\nconst sass = require('@zeit/next-sass');\n\nmodule.exports = withPlugins([\n  [sass, {\n    cssModules: true,\n    cssLoaderOptions: {\n      localIdentName: '[path]___[local]___[hash:base64:5]',\n    },\n  }, [PHASE_DEVELOPMENT_SERVER, PHASE_PRODUCTION_BUILD]],\n]);\n```\n\nYou can also negate the phases with a leading `!`:\n\n```javascript\nconst withPlugins = require('next-compose-plugins');\nconst { PHASE_DEVELOPMENT_SERVER, PHASE_PRODUCTION_BUILD } = require('next-server/constants');\nconst sass = require('@zeit/next-sass');\n\nmodule.exports = withPlugins([\n  [sass, {\n    cssModules: true,\n    cssLoaderOptions: {\n      localIdentName: '[path]___[local]___[hash:base64:5]',\n    },\n  }, ['!', PHASE_DEVELOPMENT_SERVER]],\n]);\n```\n\nThis will apply the plugin in all phases except `PHASE_DEVELOPMENT_SERVER`.\n\n### `nextConfiguration`\n\nAny direct [next.js configuration](https://github.com/zeit/next.js#custom-configuration) can go here, for example: `{distDir: 'dist'}`.\n\nYou can also customize the webpack configuration of next.js within this object.\n\n```javascript\nconst withPlugins = require('next-compose-plugins');\n\nconst nextConfig = {\n  distDir: 'build',\n  webpack: (config, options) => {\n\n    // modify the `config` here\n\n    return config;\n  },\n};\n\nmodule.exports = withPlugins([\n  // add plugins here..\n], nextConfig);\n```\n\nPhases are also supported within the `nextConfiguration` object and have the same syntax as in [plugin `configuration` objects](#configuration-object).\n```javascript\nconst { PHASE_DEVELOPMENT_SERVER } = require('next-server/constants');\nconst nextConfig = {\n  distDir: 'build',\n  ['!' + PHASE_DEVELOPMENT_SERVER]: {\n    assetPrefix: 'https://my.cdn.com',\n  },\n};\n```\n\n### Optional plugins\n\nIf a plugin should only get loaded when it is used, you can use the `optional` helper function.\nThis can especially be useful if the plugin is only in the `devDependencies` and so may not be available in all phases.\nIf you don't use the `optional` helper in this case, you would get an error.\n\n```javascript\nconst { withPlugins, optional } = require('next-compose-plugins');\nconst { PHASE_DEVELOPMENT_SERVER } = require('next-server/constants');\n\nmodule.exports = withPlugins([\n  [optional(() => require('@zeit/next-sass')), { /* optional configuration */ }, [PHASE_DEVELOPMENT_SERVER]],\n]);\n```\n\n### Extend another config file\n\nIt sometimes makes sense to split a `next.config.js` file into multiple files, for example when you have more than just one next.js project in one repository.\nYou can then define the base config in one file and add project specific plugins/settings in the config file or the project.\n\nTo easily archive this, you can use the `extend` helper in the `next.config.js` file of your project.\n\n```javascript\n// next.config.js\nconst { withPlugins, extend } = require('next-compose-plugins');\nconst baseConfig = require('./base.next.config.js');\n\nconst nextConfig = { /* ... */ };\n\nmodule.exports = extend(baseConfig).withPlugins([\n  [sass, {\n    cssModules: true,\n  }],\n], nextConfig);\n```\n\n```javascript\n// base.next.config.js\nconst withPlugins = require('next-compose-plugins');\n\nmodule.exports = withPlugins([\n  [typescript, {\n    typescriptLoaderOptions: {\n      transpileOnly: false,\n    },\n  }],\n]);\n```\n\n## Plugin developers\n\nThis plugin has a few extra functionality which you can use as a plugin developer.\nHowever, if you use them, you should mention somewhere in your readme or install instructions that it needs `next-compose-plugins` to have all features available and so it won't confuse your users if something is not working as described out-of-the-box because they don't use this compose plugin yet.\n\n### Phases\n\nYou can specify in which phases your plugin should get executed within the object you return:\n\n```javascript\nconst { PHASE_DEVELOPMENT_SERVER } = require('next-server/constants');\n\nmodule.exports = (nextConfig = {}) => {\n  return Object.assign({}, nextConfig, {\n    // define in which phases this plugin should get applied.\n    // you can also use multiple phases or negate them.\n    // however, users can still overwrite them in their configuration if they really want to.\n    phases: [PHASE_DEVELOPMENT_SERVER],\n\n    webpack(config, options) {\n      // do something here which only gets applied during development server phase\n\n      if (typeof nextConfig.webpack === 'function') {\n        return nextConfig.webpack(config, options);\n      }\n\n      return config;\n    },\n  };\n};\n```\n\nThese phases are handled as a default configuration and users can overwrite the phases in their `next.config.js` file if they want to.\nSee [phases configuration](#phases-array) for all available options.\n\n### Additional information\n\nWhen a plugin gets loaded with `next-compose-plugins`, some additional information on which you can depend is available.\nIt gets passed in as the second argument to your plugin function:\n\n```javascript\nmodule.exports = (nextConfig = {}, nextComposePlugins = {}) => {\n  console.log(nextComposePlugins);\n};\n```\n\nCurrently, it contains these values:\n\n```javascript\n{\n  // this is always true when next-compose-plugins is used\n  // so you can use this as a check when your plugin depends on it\n  nextComposePlugins: boolean,\n\n  // the current phase which gets applied\n  phase: string,\n}\n```\n\n## Examples\n\n### Basic example\n\n```javascript\n// next.config.js\nconst withPlugins = require('next-compose-plugins');\nconst images = require('next-images');\nconst sass = require('@zeit/next-sass');\nconst typescript = require('@zeit/next-typescript');\n\n// next.js configuration\nconst nextConfig = {\n  useFileSystemPublicRoutes: false,\n  distDir: 'build',\n};\n\nmodule.exports = withPlugins([\n\n  // add a plugin with specific configuration\n  [sass, {\n    cssModules: true,\n    cssLoaderOptions: {\n      localIdentName: '[local]___[hash:base64:5]',\n    },\n  }],\n\n  // add a plugin without a configuration\n  images,\n\n  // another plugin with a configuration\n  [typescript, {\n    typescriptLoaderOptions: {\n      transpileOnly: false,\n    },\n  }],\n\n], nextConfig);\n```\n\n### Advanced example\n\n```javascript\n// next.config.js\nconst { withPlugins, optional } = require('next-compose-plugins');\nconst images = require('next-images');\nconst sass = require('@zeit/next-sass');\nconst typescript = require('@zeit/next-typescript');\n\nconst {\n  PHASE_PRODUCTION_BUILD,\n  PHASE_PRODUCTION_SERVER,\n  PHASE_DEVELOPMENT_SERVER,\n  PHASE_EXPORT,\n} = require('next-server/constants');\n\n// next.js configuration\nconst nextConfig = {\n  useFileSystemPublicRoutes: false,\n  distDir: 'build',\n};\n\nmodule.exports = withPlugins([\n\n  // add a plugin with specific configuration\n  [sass, {\n    cssModules: true,\n    cssLoaderOptions: {\n      localIdentName: '[local]___[hash:base64:5]',\n    },\n    [PHASE_PRODUCTION_BUILD + PHASE_EXPORT]: {\n      cssLoaderOptions: {\n        localIdentName: '[hash:base64:8]',\n      },\n    },\n  }],\n\n  // add a plugin without a configuration\n  images,\n\n  // another plugin with a configuration (applied in all phases except development server)\n  [typescript, {\n    typescriptLoaderOptions: {\n      transpileOnly: false,\n    },\n  }, ['!', PHASE_DEVELOPMENT_SERVER]],\n\n  // load and apply a plugin only during development server phase\n  [optional(() => require('@some-internal/dev-log')), [PHASE_DEVELOPMENT_SERVER]],\n\n], nextConfig);\n```\n\n### Comparison\n\nAs a comparison, it would look like this without this plugin where it is not really clear which configuration belongs to which plugin and what are all the enabled plugins. Many features mentioned above will also not be possible or requires you to have a lot more custom code in your config file.\n\n```javascript\n// next.config.js\nconst withSass = require('@zeit/next-sass');\nconst withTypescript = require('@zeit/next-typescript');\nconst withImages = require('next-images');\nconst withOffline = require('next-offline');\n\nmodule.exports = withSass(withOffline(withTypescript(withImages({\n    {\n        cssModules: true,\n        cssLoaderOptions: {\n            importLoaders: 1,\n            localIdentName: '[local]___[hash:base64:5]',\n        },\n        typescriptLoaderOptions: {\n            transpileOnly: false,\n        },\n        useFileSystemPublicRoutes: false,\n        distDir: 'build',\n        workerName: 'sw.js',\n        imageTypes: ['jpg', 'png'],\n    }\n}))));\n```\n\n## See also\n\nSee [zeit/next-plugins](https://github.com/zeit/next-plugins) for a list of official and community made plugins for [next.js](https://github.com/zeit/next.js).\n\n## License\n\n[MIT](https://github.com/cyrilwanner/next-compose-plugins/blob/master/LICENSE) © Cyril Wanner\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cyrilwanner/next-compose-plugins.git"
  },
  "scripts": {
    "build": "babel src -d lib",
    "lint": "eslint src",
    "lint:fix": "eslint --fix src",
    "prepack": "rimraf lib/**/__tests__",
    "pretest": "npm run build",
    "test": "jest --coverage lib",
    "test:watch": "jest --watch lib",
    "watch": "babel --watch src -d lib"
  },
  "version": "2.2.0"
}
